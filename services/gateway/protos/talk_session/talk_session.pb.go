// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.6.1
// source: talk_session.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{0}
}

type CreateTalkSessionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveType    string `protobuf:"bytes,1,opt,name=activeType,proto3" json:"activeType,omitempty"`
	UsedHotKey    string `protobuf:"bytes,2,opt,name=usedHotKey,proto3" json:"usedHotKey,omitempty"`
	AccountId     int64  `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	TalkSessionId int64  `protobuf:"varint,4,opt,name=talkSessionId,proto3" json:"talkSessionId,omitempty"`
}

func (x *CreateTalkSessionHistoryRequest) Reset() {
	*x = CreateTalkSessionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTalkSessionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTalkSessionHistoryRequest) ProtoMessage() {}

func (x *CreateTalkSessionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTalkSessionHistoryRequest.ProtoReflect.Descriptor instead.
func (*CreateTalkSessionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTalkSessionHistoryRequest) GetActiveType() string {
	if x != nil {
		return x.ActiveType
	}
	return ""
}

func (x *CreateTalkSessionHistoryRequest) GetUsedHotKey() string {
	if x != nil {
		return x.UsedHotKey
	}
	return ""
}

func (x *CreateTalkSessionHistoryRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CreateTalkSessionHistoryRequest) GetTalkSessionId() int64 {
	if x != nil {
		return x.TalkSessionId
	}
	return 0
}

type CreateTalkSessionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTalkSessionHistoryResponse) Reset() {
	*x = CreateTalkSessionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTalkSessionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTalkSessionHistoryResponse) ProtoMessage() {}

func (x *CreateTalkSessionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTalkSessionHistoryResponse.ProtoReflect.Descriptor instead.
func (*CreateTalkSessionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTalkSessionHistoryResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EndTalkSessionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EndTalkSessionHistoryRequest) Reset() {
	*x = EndTalkSessionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndTalkSessionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTalkSessionHistoryRequest) ProtoMessage() {}

func (x *EndTalkSessionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTalkSessionHistoryRequest.ProtoReflect.Descriptor instead.
func (*EndTalkSessionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{3}
}

func (x *EndTalkSessionHistoryRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type EndTalkSessionHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndTalkSessionHistoryResponse) Reset() {
	*x = EndTalkSessionHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndTalkSessionHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTalkSessionHistoryResponse) ProtoMessage() {}

func (x *EndTalkSessionHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTalkSessionHistoryResponse.ProtoReflect.Descriptor instead.
func (*EndTalkSessionHistoryResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{4}
}

type GetTalkSessionHistoryByTalkSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkSessionId int64 `protobuf:"varint,1,opt,name=talkSessionId,proto3" json:"talkSessionId,omitempty"`
}

func (x *GetTalkSessionHistoryByTalkSessionRequest) Reset() {
	*x = GetTalkSessionHistoryByTalkSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTalkSessionHistoryByTalkSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTalkSessionHistoryByTalkSessionRequest) ProtoMessage() {}

func (x *GetTalkSessionHistoryByTalkSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTalkSessionHistoryByTalkSessionRequest.ProtoReflect.Descriptor instead.
func (*GetTalkSessionHistoryByTalkSessionRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{5}
}

func (x *GetTalkSessionHistoryByTalkSessionRequest) GetTalkSessionId() int64 {
	if x != nil {
		return x.TalkSessionId
	}
	return 0
}

type GetTalkSessionHistoryByTalkSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ActiveType    string `protobuf:"bytes,2,opt,name=activeType,proto3" json:"activeType,omitempty"`
	StartTime     string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       string `protobuf:"bytes,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
	UsedHotKey    string `protobuf:"bytes,5,opt,name=usedHotKey,proto3" json:"usedHotKey,omitempty"`
	CreatedAt     string `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     string `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AccountId     int64  `protobuf:"varint,9,opt,name=accountId,proto3" json:"accountId,omitempty"`
	TalkSessionId int64  `protobuf:"varint,10,opt,name=talkSessionId,proto3" json:"talkSessionId,omitempty"`
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) Reset() {
	*x = GetTalkSessionHistoryByTalkSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTalkSessionHistoryByTalkSessionResponse) ProtoMessage() {}

func (x *GetTalkSessionHistoryByTalkSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTalkSessionHistoryByTalkSessionResponse.ProtoReflect.Descriptor instead.
func (*GetTalkSessionHistoryByTalkSessionResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{6}
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) GetActiveType() string {
	if x != nil {
		return x.ActiveType
	}
	return ""
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) GetUsedHotKey() string {
	if x != nil {
		return x.UsedHotKey
	}
	return ""
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *GetTalkSessionHistoryByTalkSessionResponse) GetTalkSessionId() int64 {
	if x != nil {
		return x.TalkSessionId
	}
	return 0
}

type CreateNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkSessionId int64  `protobuf:"varint,1,opt,name=talkSessionId,proto3" json:"talkSessionId,omitempty"`
	Content       string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	IsGuest       bool   `protobuf:"varint,3,opt,name=isGuest,proto3" json:"isGuest,omitempty"`
}

func (x *CreateNoteRequest) Reset() {
	*x = CreateNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNoteRequest) ProtoMessage() {}

func (x *CreateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNoteRequest.ProtoReflect.Descriptor instead.
func (*CreateNoteRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{7}
}

func (x *CreateNoteRequest) GetTalkSessionId() int64 {
	if x != nil {
		return x.TalkSessionId
	}
	return 0
}

func (x *CreateNoteRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateNoteRequest) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

type CreateNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TalkSessionId int64  `protobuf:"varint,2,opt,name=talkSessionId,proto3" json:"talkSessionId,omitempty"`
	Content       string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	IsGuest       bool   `protobuf:"varint,4,opt,name=isGuest,proto3" json:"isGuest,omitempty"`
	CreatedAt     string `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     string `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CreateNoteResponse) Reset() {
	*x = CreateNoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNoteResponse) ProtoMessage() {}

func (x *CreateNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNoteResponse.ProtoReflect.Descriptor instead.
func (*CreateNoteResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{8}
}

func (x *CreateNoteResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateNoteResponse) GetTalkSessionId() int64 {
	if x != nil {
		return x.TalkSessionId
	}
	return 0
}

func (x *CreateNoteResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateNoteResponse) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

func (x *CreateNoteResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CreateNoteResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetListNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkSessionId int64 `protobuf:"varint,1,opt,name=talkSessionId,proto3" json:"talkSessionId,omitempty"`
	Page          int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PerPage       int64 `protobuf:"varint,3,opt,name=perPage,proto3" json:"perPage,omitempty"`
}

func (x *GetListNoteRequest) Reset() {
	*x = GetListNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListNoteRequest) ProtoMessage() {}

func (x *GetListNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListNoteRequest.ProtoReflect.Descriptor instead.
func (*GetListNoteRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{9}
}

func (x *GetListNoteRequest) GetTalkSessionId() int64 {
	if x != nil {
		return x.TalkSessionId
	}
	return 0
}

func (x *GetListNoteRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetListNoteRequest) GetPerPage() int64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

type GetListNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes []*CreateNoteResponse `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *GetListNoteResponse) Reset() {
	*x = GetListNoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetListNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetListNoteResponse) ProtoMessage() {}

func (x *GetListNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetListNoteResponse.ProtoReflect.Descriptor instead.
func (*GetListNoteResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{10}
}

func (x *GetListNoteResponse) GetNotes() []*CreateNoteResponse {
	if x != nil {
		return x.Notes
	}
	return nil
}

type UpdateNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	IsGuest bool   `protobuf:"varint,3,opt,name=isGuest,proto3" json:"isGuest,omitempty"`
}

func (x *UpdateNoteRequest) Reset() {
	*x = UpdateNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNoteRequest) ProtoMessage() {}

func (x *UpdateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNoteRequest.ProtoReflect.Descriptor instead.
func (*UpdateNoteRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateNoteRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateNoteRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateNoteRequest) GetIsGuest() bool {
	if x != nil {
		return x.IsGuest
	}
	return false
}

type DeleteNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNoteRequest) Reset() {
	*x = DeleteNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNoteRequest) ProtoMessage() {}

func (x *DeleteNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNoteRequest.ProtoReflect.Descriptor instead.
func (*DeleteNoteRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteNoteRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsAffected  int64 `protobuf:"varint,1,opt,name=rowsAffected,proto3" json:"rowsAffected,omitempty"`
	TalkSessionId int64 `protobuf:"varint,2,opt,name=talkSessionId,proto3" json:"talkSessionId,omitempty"`
}

func (x *DeleteNoteResponse) Reset() {
	*x = DeleteNoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNoteResponse) ProtoMessage() {}

func (x *DeleteNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNoteResponse.ProtoReflect.Descriptor instead.
func (*DeleteNoteResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteNoteResponse) GetRowsAffected() int64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

func (x *DeleteNoteResponse) GetTalkSessionId() int64 {
	if x != nil {
		return x.TalkSessionId
	}
	return 0
}

type ConversationContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Private     bool   `protobuf:"varint,1,opt,name=private,proto3" json:"private,omitempty"`
	Content     string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	SendingTime string `protobuf:"bytes,3,opt,name=sendingTime,proto3" json:"sendingTime,omitempty"`
}

func (x *ConversationContent) Reset() {
	*x = ConversationContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationContent) ProtoMessage() {}

func (x *ConversationContent) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationContent.ProtoReflect.Descriptor instead.
func (*ConversationContent) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{14}
}

func (x *ConversationContent) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *ConversationContent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ConversationContent) GetSendingTime() string {
	if x != nil {
		return x.SendingTime
	}
	return ""
}

type SaveSpeechToTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TalkSessionId int64  `protobuf:"varint,1,opt,name=talkSessionId,proto3" json:"talkSessionId,omitempty"`
	Conversation  string `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation,omitempty"`
}

func (x *SaveSpeechToTextRequest) Reset() {
	*x = SaveSpeechToTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSpeechToTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSpeechToTextRequest) ProtoMessage() {}

func (x *SaveSpeechToTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSpeechToTextRequest.ProtoReflect.Descriptor instead.
func (*SaveSpeechToTextRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{15}
}

func (x *SaveSpeechToTextRequest) GetTalkSessionId() int64 {
	if x != nil {
		return x.TalkSessionId
	}
	return 0
}

func (x *SaveSpeechToTextRequest) GetConversation() string {
	if x != nil {
		return x.Conversation
	}
	return ""
}

type CreateTalkSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageLink    string `protobuf:"bytes,1,opt,name=storageLink,proto3" json:"storageLink,omitempty"`
	UsedHotKey     string `protobuf:"bytes,2,opt,name=usedHotKey,proto3" json:"usedHotKey,omitempty"`
	SessionStatus  string `protobuf:"bytes,3,opt,name=sessionStatus,proto3" json:"sessionStatus,omitempty"`
	CustomerRecord string `protobuf:"bytes,4,opt,name=customerRecord,proto3" json:"customerRecord,omitempty"`
}

func (x *CreateTalkSessionRequest) Reset() {
	*x = CreateTalkSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTalkSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTalkSessionRequest) ProtoMessage() {}

func (x *CreateTalkSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTalkSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateTalkSessionRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTalkSessionRequest) GetStorageLink() string {
	if x != nil {
		return x.StorageLink
	}
	return ""
}

func (x *CreateTalkSessionRequest) GetUsedHotKey() string {
	if x != nil {
		return x.UsedHotKey
	}
	return ""
}

func (x *CreateTalkSessionRequest) GetSessionStatus() string {
	if x != nil {
		return x.SessionStatus
	}
	return ""
}

func (x *CreateTalkSessionRequest) GetCustomerRecord() string {
	if x != nil {
		return x.CustomerRecord
	}
	return ""
}

type CreateTalkSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateTalkSessionResponse) Reset() {
	*x = CreateTalkSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTalkSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTalkSessionResponse) ProtoMessage() {}

func (x *CreateTalkSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTalkSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateTalkSessionResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTalkSessionResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateTalkSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageLink    string `protobuf:"bytes,2,opt,name=storageLink,proto3" json:"storageLink,omitempty"`
	UsedHotKey     string `protobuf:"bytes,4,opt,name=usedHotKey,proto3" json:"usedHotKey,omitempty"`
	SessionStatus  string `protobuf:"bytes,5,opt,name=sessionStatus,proto3" json:"sessionStatus,omitempty"`
	CustomerRecord string `protobuf:"bytes,6,opt,name=customerRecord,proto3" json:"customerRecord,omitempty"`
	CreatedAt      string `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt      string `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *UpdateTalkSessionRequest) Reset() {
	*x = UpdateTalkSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTalkSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTalkSessionRequest) ProtoMessage() {}

func (x *UpdateTalkSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTalkSessionRequest.ProtoReflect.Descriptor instead.
func (*UpdateTalkSessionRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateTalkSessionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTalkSessionRequest) GetStorageLink() string {
	if x != nil {
		return x.StorageLink
	}
	return ""
}

func (x *UpdateTalkSessionRequest) GetUsedHotKey() string {
	if x != nil {
		return x.UsedHotKey
	}
	return ""
}

func (x *UpdateTalkSessionRequest) GetSessionStatus() string {
	if x != nil {
		return x.SessionStatus
	}
	return ""
}

func (x *UpdateTalkSessionRequest) GetCustomerRecord() string {
	if x != nil {
		return x.CustomerRecord
	}
	return ""
}

func (x *UpdateTalkSessionRequest) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpdateTalkSessionRequest) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type UpdateTalkSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateTalkSessionResponse) Reset() {
	*x = UpdateTalkSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTalkSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTalkSessionResponse) ProtoMessage() {}

func (x *UpdateTalkSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTalkSessionResponse.ProtoReflect.Descriptor instead.
func (*UpdateTalkSessionResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateTalkSessionResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTalkSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTalkSessionRequest) Reset() {
	*x = GetTalkSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTalkSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTalkSessionRequest) ProtoMessage() {}

func (x *GetTalkSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTalkSessionRequest.ProtoReflect.Descriptor instead.
func (*GetTalkSessionRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{20}
}

func (x *GetTalkSessionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTalkSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StorageLink    string `protobuf:"bytes,2,opt,name=storageLink,proto3" json:"storageLink,omitempty"`
	EndTime        string `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	UsedHotKey     string `protobuf:"bytes,4,opt,name=usedHotKey,proto3" json:"usedHotKey,omitempty"`
	SessionStatus  string `protobuf:"bytes,5,opt,name=sessionStatus,proto3" json:"sessionStatus,omitempty"`
	CustomerRecord string `protobuf:"bytes,6,opt,name=customerRecord,proto3" json:"customerRecord,omitempty"`
	CreatedAt      string `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt      string `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *GetTalkSessionResponse) Reset() {
	*x = GetTalkSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTalkSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTalkSessionResponse) ProtoMessage() {}

func (x *GetTalkSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTalkSessionResponse.ProtoReflect.Descriptor instead.
func (*GetTalkSessionResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{21}
}

func (x *GetTalkSessionResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetTalkSessionResponse) GetStorageLink() string {
	if x != nil {
		return x.StorageLink
	}
	return ""
}

func (x *GetTalkSessionResponse) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *GetTalkSessionResponse) GetUsedHotKey() string {
	if x != nil {
		return x.UsedHotKey
	}
	return ""
}

func (x *GetTalkSessionResponse) GetSessionStatus() string {
	if x != nil {
		return x.SessionStatus
	}
	return ""
}

func (x *GetTalkSessionResponse) GetCustomerRecord() string {
	if x != nil {
		return x.CustomerRecord
	}
	return ""
}

func (x *GetTalkSessionResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetTalkSessionResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type DeleteTalkSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTalkSessionRequest) Reset() {
	*x = DeleteTalkSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTalkSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTalkSessionRequest) ProtoMessage() {}

func (x *DeleteTalkSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTalkSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteTalkSessionRequest) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteTalkSessionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteTalkSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsAffected int64 `protobuf:"varint,1,opt,name=rowsAffected,proto3" json:"rowsAffected,omitempty"`
}

func (x *DeleteTalkSessionResponse) Reset() {
	*x = DeleteTalkSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_session_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTalkSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTalkSessionResponse) ProtoMessage() {}

func (x *DeleteTalkSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_session_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTalkSessionResponse.ProtoReflect.Descriptor instead.
func (*DeleteTalkSessionResponse) Descriptor() ([]byte, []int) {
	return file_talk_session_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteTalkSessionResponse) GetRowsAffected() int64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

var File_talk_session_proto protoreflect.FileDescriptor

var file_talk_session_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa5, 0x01, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1c, 0x45, 0x6e, 0x64, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x45, 0x6e, 0x64, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x42, 0x79, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x2a,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x48, 0x6f, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x6d, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x6c, 0x6b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x47, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x68,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x63, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x48, 0x6f,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64,
	0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x2b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xf6, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x8e, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x48,
	0x6f, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x64, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f,
	0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x32, 0xd2,
	0x09, 0x0a, 0x0b, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x25, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a,
	0x15, 0x45, 0x6e, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x6e, 0x64, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x99, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54,
	0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x61,
	0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x20, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x6c, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_talk_session_proto_rawDescOnce sync.Once
	file_talk_session_proto_rawDescData = file_talk_session_proto_rawDesc
)

func file_talk_session_proto_rawDescGZIP() []byte {
	file_talk_session_proto_rawDescOnce.Do(func() {
		file_talk_session_proto_rawDescData = protoimpl.X.CompressGZIP(file_talk_session_proto_rawDescData)
	})
	return file_talk_session_proto_rawDescData
}

var file_talk_session_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_talk_session_proto_goTypes = []interface{}{
	(*Empty)(nil),                                      // 0: talk_session.Empty
	(*CreateTalkSessionHistoryRequest)(nil),            // 1: talk_session.CreateTalkSessionHistoryRequest
	(*CreateTalkSessionHistoryResponse)(nil),           // 2: talk_session.CreateTalkSessionHistoryResponse
	(*EndTalkSessionHistoryRequest)(nil),               // 3: talk_session.EndTalkSessionHistoryRequest
	(*EndTalkSessionHistoryResponse)(nil),              // 4: talk_session.EndTalkSessionHistoryResponse
	(*GetTalkSessionHistoryByTalkSessionRequest)(nil),  // 5: talk_session.GetTalkSessionHistoryByTalkSessionRequest
	(*GetTalkSessionHistoryByTalkSessionResponse)(nil), // 6: talk_session.GetTalkSessionHistoryByTalkSessionResponse
	(*CreateNoteRequest)(nil),                          // 7: talk_session.CreateNoteRequest
	(*CreateNoteResponse)(nil),                         // 8: talk_session.CreateNoteResponse
	(*GetListNoteRequest)(nil),                         // 9: talk_session.GetListNoteRequest
	(*GetListNoteResponse)(nil),                        // 10: talk_session.GetListNoteResponse
	(*UpdateNoteRequest)(nil),                          // 11: talk_session.UpdateNoteRequest
	(*DeleteNoteRequest)(nil),                          // 12: talk_session.DeleteNoteRequest
	(*DeleteNoteResponse)(nil),                         // 13: talk_session.DeleteNoteResponse
	(*ConversationContent)(nil),                        // 14: talk_session.ConversationContent
	(*SaveSpeechToTextRequest)(nil),                    // 15: talk_session.SaveSpeechToTextRequest
	(*CreateTalkSessionRequest)(nil),                   // 16: talk_session.CreateTalkSessionRequest
	(*CreateTalkSessionResponse)(nil),                  // 17: talk_session.CreateTalkSessionResponse
	(*UpdateTalkSessionRequest)(nil),                   // 18: talk_session.UpdateTalkSessionRequest
	(*UpdateTalkSessionResponse)(nil),                  // 19: talk_session.UpdateTalkSessionResponse
	(*GetTalkSessionRequest)(nil),                      // 20: talk_session.GetTalkSessionRequest
	(*GetTalkSessionResponse)(nil),                     // 21: talk_session.GetTalkSessionResponse
	(*DeleteTalkSessionRequest)(nil),                   // 22: talk_session.DeleteTalkSessionRequest
	(*DeleteTalkSessionResponse)(nil),                  // 23: talk_session.DeleteTalkSessionResponse
}
var file_talk_session_proto_depIdxs = []int32{
	8,  // 0: talk_session.GetListNoteResponse.notes:type_name -> talk_session.CreateNoteResponse
	15, // 1: talk_session.TalkSession.SaveSpeechToText:input_type -> talk_session.SaveSpeechToTextRequest
	1,  // 2: talk_session.TalkSession.CreateTalkSessionHistory:input_type -> talk_session.CreateTalkSessionHistoryRequest
	3,  // 3: talk_session.TalkSession.EndTalkSessionHistory:input_type -> talk_session.EndTalkSessionHistoryRequest
	5,  // 4: talk_session.TalkSession.GetTalkSessionHistoryByTalkSession:input_type -> talk_session.GetTalkSessionHistoryByTalkSessionRequest
	7,  // 5: talk_session.TalkSession.CreateNote:input_type -> talk_session.CreateNoteRequest
	9,  // 6: talk_session.TalkSession.GetListNote:input_type -> talk_session.GetListNoteRequest
	11, // 7: talk_session.TalkSession.UpdateNote:input_type -> talk_session.UpdateNoteRequest
	12, // 8: talk_session.TalkSession.DeleteNote:input_type -> talk_session.DeleteNoteRequest
	16, // 9: talk_session.TalkSession.CreateTalkSession:input_type -> talk_session.CreateTalkSessionRequest
	18, // 10: talk_session.TalkSession.UpdateTalkSession:input_type -> talk_session.UpdateTalkSessionRequest
	20, // 11: talk_session.TalkSession.GetTalkSession:input_type -> talk_session.GetTalkSessionRequest
	22, // 12: talk_session.TalkSession.DeleteTalkSession:input_type -> talk_session.DeleteTalkSessionRequest
	0,  // 13: talk_session.TalkSession.SaveSpeechToText:output_type -> talk_session.Empty
	2,  // 14: talk_session.TalkSession.CreateTalkSessionHistory:output_type -> talk_session.CreateTalkSessionHistoryResponse
	4,  // 15: talk_session.TalkSession.EndTalkSessionHistory:output_type -> talk_session.EndTalkSessionHistoryResponse
	6,  // 16: talk_session.TalkSession.GetTalkSessionHistoryByTalkSession:output_type -> talk_session.GetTalkSessionHistoryByTalkSessionResponse
	8,  // 17: talk_session.TalkSession.CreateNote:output_type -> talk_session.CreateNoteResponse
	10, // 18: talk_session.TalkSession.GetListNote:output_type -> talk_session.GetListNoteResponse
	8,  // 19: talk_session.TalkSession.UpdateNote:output_type -> talk_session.CreateNoteResponse
	13, // 20: talk_session.TalkSession.DeleteNote:output_type -> talk_session.DeleteNoteResponse
	17, // 21: talk_session.TalkSession.CreateTalkSession:output_type -> talk_session.CreateTalkSessionResponse
	19, // 22: talk_session.TalkSession.UpdateTalkSession:output_type -> talk_session.UpdateTalkSessionResponse
	21, // 23: talk_session.TalkSession.GetTalkSession:output_type -> talk_session.GetTalkSessionResponse
	23, // 24: talk_session.TalkSession.DeleteTalkSession:output_type -> talk_session.DeleteTalkSessionResponse
	13, // [13:25] is the sub-list for method output_type
	1,  // [1:13] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_talk_session_proto_init() }
func file_talk_session_proto_init() {
	if File_talk_session_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_talk_session_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTalkSessionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTalkSessionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndTalkSessionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndTalkSessionHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTalkSessionHistoryByTalkSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTalkSessionHistoryByTalkSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetListNoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSpeechToTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTalkSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTalkSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTalkSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTalkSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTalkSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTalkSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTalkSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_session_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTalkSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_talk_session_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_talk_session_proto_goTypes,
		DependencyIndexes: file_talk_session_proto_depIdxs,
		MessageInfos:      file_talk_session_proto_msgTypes,
	}.Build()
	File_talk_session_proto = out.File
	file_talk_session_proto_rawDesc = nil
	file_talk_session_proto_goTypes = nil
	file_talk_session_proto_depIdxs = nil
}
