// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamingClient is the client API for Streaming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingClient interface {
	StreamOperatorSideVideo(ctx context.Context, opts ...grpc.CallOption) (Streaming_StreamOperatorSideVideoClient, error)
	StreamOperatorSideVoice(ctx context.Context, opts ...grpc.CallOption) (Streaming_StreamOperatorSideVoiceClient, error)
	StreamPOSSideVideo(ctx context.Context, opts ...grpc.CallOption) (Streaming_StreamPOSSideVideoClient, error)
	StreamPOSSideVoice(ctx context.Context, opts ...grpc.CallOption) (Streaming_StreamPOSSideVoiceClient, error)
	SpeechToText(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Streaming_SpeechToTextClient, error)
	ListenEventPOSSide(ctx context.Context, in *ListenEventPOSSideRequest, opts ...grpc.CallOption) (Streaming_ListenEventPOSSideClient, error)
	ListenEventOperatorSide(ctx context.Context, in *ListenEventOperatorSideRequest, opts ...grpc.CallOption) (Streaming_ListenEventOperatorSideClient, error)
	ListenNotes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Streaming_ListenNotesClient, error)
	ListenListPos(ctx context.Context, in *ListenListPosRequest, opts ...grpc.CallOption) (Streaming_ListenListPosClient, error)
}

type streamingClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingClient(cc grpc.ClientConnInterface) StreamingClient {
	return &streamingClient{cc}
}

func (c *streamingClient) StreamOperatorSideVideo(ctx context.Context, opts ...grpc.CallOption) (Streaming_StreamOperatorSideVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streaming_ServiceDesc.Streams[0], "/streaming.Streaming/StreamOperatorSideVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingStreamOperatorSideVideoClient{stream}
	return x, nil
}

type Streaming_StreamOperatorSideVideoClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type streamingStreamOperatorSideVideoClient struct {
	grpc.ClientStream
}

func (x *streamingStreamOperatorSideVideoClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingStreamOperatorSideVideoClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) StreamOperatorSideVoice(ctx context.Context, opts ...grpc.CallOption) (Streaming_StreamOperatorSideVoiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streaming_ServiceDesc.Streams[1], "/streaming.Streaming/StreamOperatorSideVoice", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingStreamOperatorSideVoiceClient{stream}
	return x, nil
}

type Streaming_StreamOperatorSideVoiceClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type streamingStreamOperatorSideVoiceClient struct {
	grpc.ClientStream
}

func (x *streamingStreamOperatorSideVoiceClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingStreamOperatorSideVoiceClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) StreamPOSSideVideo(ctx context.Context, opts ...grpc.CallOption) (Streaming_StreamPOSSideVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streaming_ServiceDesc.Streams[2], "/streaming.Streaming/StreamPOSSideVideo", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingStreamPOSSideVideoClient{stream}
	return x, nil
}

type Streaming_StreamPOSSideVideoClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type streamingStreamPOSSideVideoClient struct {
	grpc.ClientStream
}

func (x *streamingStreamPOSSideVideoClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingStreamPOSSideVideoClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) StreamPOSSideVoice(ctx context.Context, opts ...grpc.CallOption) (Streaming_StreamPOSSideVoiceClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streaming_ServiceDesc.Streams[3], "/streaming.Streaming/StreamPOSSideVoice", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingStreamPOSSideVoiceClient{stream}
	return x, nil
}

type Streaming_StreamPOSSideVoiceClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type streamingStreamPOSSideVoiceClient struct {
	grpc.ClientStream
}

func (x *streamingStreamPOSSideVoiceClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingStreamPOSSideVoiceClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) SpeechToText(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Streaming_SpeechToTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streaming_ServiceDesc.Streams[4], "/streaming.Streaming/SpeechToText", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingSpeechToTextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streaming_SpeechToTextClient interface {
	Recv() (*SpeechToTextData, error)
	grpc.ClientStream
}

type streamingSpeechToTextClient struct {
	grpc.ClientStream
}

func (x *streamingSpeechToTextClient) Recv() (*SpeechToTextData, error) {
	m := new(SpeechToTextData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) ListenEventPOSSide(ctx context.Context, in *ListenEventPOSSideRequest, opts ...grpc.CallOption) (Streaming_ListenEventPOSSideClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streaming_ServiceDesc.Streams[5], "/streaming.Streaming/ListenEventPOSSide", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingListenEventPOSSideClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streaming_ListenEventPOSSideClient interface {
	Recv() (*ListenEventPOSSideResponse, error)
	grpc.ClientStream
}

type streamingListenEventPOSSideClient struct {
	grpc.ClientStream
}

func (x *streamingListenEventPOSSideClient) Recv() (*ListenEventPOSSideResponse, error) {
	m := new(ListenEventPOSSideResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) ListenEventOperatorSide(ctx context.Context, in *ListenEventOperatorSideRequest, opts ...grpc.CallOption) (Streaming_ListenEventOperatorSideClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streaming_ServiceDesc.Streams[6], "/streaming.Streaming/ListenEventOperatorSide", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingListenEventOperatorSideClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streaming_ListenEventOperatorSideClient interface {
	Recv() (*ListenEventOperatorSideResponse, error)
	grpc.ClientStream
}

type streamingListenEventOperatorSideClient struct {
	grpc.ClientStream
}

func (x *streamingListenEventOperatorSideClient) Recv() (*ListenEventOperatorSideResponse, error) {
	m := new(ListenEventOperatorSideResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) ListenNotes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Streaming_ListenNotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streaming_ServiceDesc.Streams[7], "/streaming.Streaming/ListenNotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingListenNotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streaming_ListenNotesClient interface {
	Recv() (*ListenEventResponse, error)
	grpc.ClientStream
}

type streamingListenNotesClient struct {
	grpc.ClientStream
}

func (x *streamingListenNotesClient) Recv() (*ListenEventResponse, error) {
	m := new(ListenEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingClient) ListenListPos(ctx context.Context, in *ListenListPosRequest, opts ...grpc.CallOption) (Streaming_ListenListPosClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streaming_ServiceDesc.Streams[8], "/streaming.Streaming/ListenListPos", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingListenListPosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streaming_ListenListPosClient interface {
	Recv() (*ListenListPosResponse, error)
	grpc.ClientStream
}

type streamingListenListPosClient struct {
	grpc.ClientStream
}

func (x *streamingListenListPosClient) Recv() (*ListenListPosResponse, error) {
	m := new(ListenListPosResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingServer is the server API for Streaming service.
// All implementations must embed UnimplementedStreamingServer
// for forward compatibility
type StreamingServer interface {
	StreamOperatorSideVideo(Streaming_StreamOperatorSideVideoServer) error
	StreamOperatorSideVoice(Streaming_StreamOperatorSideVoiceServer) error
	StreamPOSSideVideo(Streaming_StreamPOSSideVideoServer) error
	StreamPOSSideVoice(Streaming_StreamPOSSideVoiceServer) error
	SpeechToText(*empty.Empty, Streaming_SpeechToTextServer) error
	ListenEventPOSSide(*ListenEventPOSSideRequest, Streaming_ListenEventPOSSideServer) error
	ListenEventOperatorSide(*ListenEventOperatorSideRequest, Streaming_ListenEventOperatorSideServer) error
	ListenNotes(*empty.Empty, Streaming_ListenNotesServer) error
	ListenListPos(*ListenListPosRequest, Streaming_ListenListPosServer) error
	mustEmbedUnimplementedStreamingServer()
}

// UnimplementedStreamingServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingServer struct {
}

func (UnimplementedStreamingServer) StreamOperatorSideVideo(Streaming_StreamOperatorSideVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOperatorSideVideo not implemented")
}
func (UnimplementedStreamingServer) StreamOperatorSideVoice(Streaming_StreamOperatorSideVoiceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOperatorSideVoice not implemented")
}
func (UnimplementedStreamingServer) StreamPOSSideVideo(Streaming_StreamPOSSideVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPOSSideVideo not implemented")
}
func (UnimplementedStreamingServer) StreamPOSSideVoice(Streaming_StreamPOSSideVoiceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPOSSideVoice not implemented")
}
func (UnimplementedStreamingServer) SpeechToText(*empty.Empty, Streaming_SpeechToTextServer) error {
	return status.Errorf(codes.Unimplemented, "method SpeechToText not implemented")
}
func (UnimplementedStreamingServer) ListenEventPOSSide(*ListenEventPOSSideRequest, Streaming_ListenEventPOSSideServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenEventPOSSide not implemented")
}
func (UnimplementedStreamingServer) ListenEventOperatorSide(*ListenEventOperatorSideRequest, Streaming_ListenEventOperatorSideServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenEventOperatorSide not implemented")
}
func (UnimplementedStreamingServer) ListenNotes(*empty.Empty, Streaming_ListenNotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenNotes not implemented")
}
func (UnimplementedStreamingServer) ListenListPos(*ListenListPosRequest, Streaming_ListenListPosServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenListPos not implemented")
}
func (UnimplementedStreamingServer) mustEmbedUnimplementedStreamingServer() {}

// UnsafeStreamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingServer will
// result in compilation errors.
type UnsafeStreamingServer interface {
	mustEmbedUnimplementedStreamingServer()
}

func RegisterStreamingServer(s grpc.ServiceRegistrar, srv StreamingServer) {
	s.RegisterService(&Streaming_ServiceDesc, srv)
}

func _Streaming_StreamOperatorSideVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServer).StreamOperatorSideVideo(&streamingStreamOperatorSideVideoServer{stream})
}

type Streaming_StreamOperatorSideVideoServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type streamingStreamOperatorSideVideoServer struct {
	grpc.ServerStream
}

func (x *streamingStreamOperatorSideVideoServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingStreamOperatorSideVideoServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Streaming_StreamOperatorSideVoice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServer).StreamOperatorSideVoice(&streamingStreamOperatorSideVoiceServer{stream})
}

type Streaming_StreamOperatorSideVoiceServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type streamingStreamOperatorSideVoiceServer struct {
	grpc.ServerStream
}

func (x *streamingStreamOperatorSideVoiceServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingStreamOperatorSideVoiceServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Streaming_StreamPOSSideVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServer).StreamPOSSideVideo(&streamingStreamPOSSideVideoServer{stream})
}

type Streaming_StreamPOSSideVideoServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type streamingStreamPOSSideVideoServer struct {
	grpc.ServerStream
}

func (x *streamingStreamPOSSideVideoServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingStreamPOSSideVideoServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Streaming_StreamPOSSideVoice_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServer).StreamPOSSideVoice(&streamingStreamPOSSideVoiceServer{stream})
}

type Streaming_StreamPOSSideVoiceServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type streamingStreamPOSSideVoiceServer struct {
	grpc.ServerStream
}

func (x *streamingStreamPOSSideVoiceServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingStreamPOSSideVoiceServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Streaming_SpeechToText_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServer).SpeechToText(m, &streamingSpeechToTextServer{stream})
}

type Streaming_SpeechToTextServer interface {
	Send(*SpeechToTextData) error
	grpc.ServerStream
}

type streamingSpeechToTextServer struct {
	grpc.ServerStream
}

func (x *streamingSpeechToTextServer) Send(m *SpeechToTextData) error {
	return x.ServerStream.SendMsg(m)
}

func _Streaming_ListenEventPOSSide_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenEventPOSSideRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServer).ListenEventPOSSide(m, &streamingListenEventPOSSideServer{stream})
}

type Streaming_ListenEventPOSSideServer interface {
	Send(*ListenEventPOSSideResponse) error
	grpc.ServerStream
}

type streamingListenEventPOSSideServer struct {
	grpc.ServerStream
}

func (x *streamingListenEventPOSSideServer) Send(m *ListenEventPOSSideResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Streaming_ListenEventOperatorSide_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenEventOperatorSideRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServer).ListenEventOperatorSide(m, &streamingListenEventOperatorSideServer{stream})
}

type Streaming_ListenEventOperatorSideServer interface {
	Send(*ListenEventOperatorSideResponse) error
	grpc.ServerStream
}

type streamingListenEventOperatorSideServer struct {
	grpc.ServerStream
}

func (x *streamingListenEventOperatorSideServer) Send(m *ListenEventOperatorSideResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Streaming_ListenNotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServer).ListenNotes(m, &streamingListenNotesServer{stream})
}

type Streaming_ListenNotesServer interface {
	Send(*ListenEventResponse) error
	grpc.ServerStream
}

type streamingListenNotesServer struct {
	grpc.ServerStream
}

func (x *streamingListenNotesServer) Send(m *ListenEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Streaming_ListenListPos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenListPosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServer).ListenListPos(m, &streamingListenListPosServer{stream})
}

type Streaming_ListenListPosServer interface {
	Send(*ListenListPosResponse) error
	grpc.ServerStream
}

type streamingListenListPosServer struct {
	grpc.ServerStream
}

func (x *streamingListenListPosServer) Send(m *ListenListPosResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Streaming_ServiceDesc is the grpc.ServiceDesc for Streaming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streaming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streaming.Streaming",
	HandlerType: (*StreamingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOperatorSideVideo",
			Handler:       _Streaming_StreamOperatorSideVideo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamOperatorSideVoice",
			Handler:       _Streaming_StreamOperatorSideVoice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamPOSSideVideo",
			Handler:       _Streaming_StreamPOSSideVideo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamPOSSideVoice",
			Handler:       _Streaming_StreamPOSSideVoice_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SpeechToText",
			Handler:       _Streaming_SpeechToText_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenEventPOSSide",
			Handler:       _Streaming_ListenEventPOSSide_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenEventOperatorSide",
			Handler:       _Streaming_ListenEventOperatorSide_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenNotes",
			Handler:       _Streaming_ListenNotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenListPos",
			Handler:       _Streaming_ListenListPos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streaming.proto",
}
