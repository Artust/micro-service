// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountManagementClient is the client API for AccountManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountManagementClient interface {
	// Auth
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	// Account
	GetAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Account, error)
	GetListAccount(ctx context.Context, in *GetListAccountRequest, opts ...grpc.CallOption) (*AccountList, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error)
	DeactiveAccount(ctx context.Context, in *DeactiveAccountRequest, opts ...grpc.CallOption) (*Empty, error)
	ActiveAccount(ctx context.Context, in *ActiveAccountRequest, opts ...grpc.CallOption) (*Empty, error)
	// Permission
	GetPermission(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Permission, error)
	GetListPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PermissionList, error)
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*Permission, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Permission, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*Empty, error)
	// Role
	GetAccountRole(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AccountRole, error)
	GetListAccountRole(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountRoleList, error)
	CreateAccountRole(ctx context.Context, in *CreateAccountRoleRequest, opts ...grpc.CallOption) (*AccountRole, error)
	UpdateAccountRole(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*AccountRole, error)
	DeleteAccountRole(ctx context.Context, in *DeleteAccountRoleRequest, opts ...grpc.CallOption) (*Empty, error)
	// Activity
	GetUserActivity(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*UserActivityList, error)
	SaveUserActivity(ctx context.Context, in *UserActivity, opts ...grpc.CallOption) (*UserActivity, error)
}

type accountManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountManagementClient(cc grpc.ClientConnInterface) AccountManagementClient {
	return &accountManagementClient{cc}
}

func (c *accountManagementClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/ForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) GetAccount(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) GetListAccount(ctx context.Context, in *GetListAccountRequest, opts ...grpc.CallOption) (*AccountList, error) {
	out := new(AccountList)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/GetListAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) DeactiveAccount(ctx context.Context, in *DeactiveAccountRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/DeactiveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) ActiveAccount(ctx context.Context, in *ActiveAccountRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/ActiveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) GetPermission(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Permission, error) {
	out := new(Permission)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/GetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) GetListPermission(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PermissionList, error) {
	out := new(PermissionList)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/GetListPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*Permission, error) {
	out := new(Permission)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/CreatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*Permission, error) {
	out := new(Permission)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/UpdatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) GetAccountRole(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AccountRole, error) {
	out := new(AccountRole)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/GetAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) GetListAccountRole(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AccountRoleList, error) {
	out := new(AccountRoleList)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/GetListAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) CreateAccountRole(ctx context.Context, in *CreateAccountRoleRequest, opts ...grpc.CallOption) (*AccountRole, error) {
	out := new(AccountRole)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/CreateAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) UpdateAccountRole(ctx context.Context, in *UpdateAccountRoleRequest, opts ...grpc.CallOption) (*AccountRole, error) {
	out := new(AccountRole)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/UpdateAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) DeleteAccountRole(ctx context.Context, in *DeleteAccountRoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/DeleteAccountRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) GetUserActivity(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*UserActivityList, error) {
	out := new(UserActivityList)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/GetUserActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagementClient) SaveUserActivity(ctx context.Context, in *UserActivity, opts ...grpc.CallOption) (*UserActivity, error) {
	out := new(UserActivity)
	err := c.cc.Invoke(ctx, "/account_management.AccountManagement/SaveUserActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountManagementServer is the server API for AccountManagement service.
// All implementations must embed UnimplementedAccountManagementServer
// for forward compatibility
type AccountManagementServer interface {
	// Auth
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*Empty, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*Empty, error)
	// Account
	GetAccount(context.Context, *Id) (*Account, error)
	GetListAccount(context.Context, *GetListAccountRequest) (*AccountList, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*Empty, error)
	DeactiveAccount(context.Context, *DeactiveAccountRequest) (*Empty, error)
	ActiveAccount(context.Context, *ActiveAccountRequest) (*Empty, error)
	// Permission
	GetPermission(context.Context, *Id) (*Permission, error)
	GetListPermission(context.Context, *Empty) (*PermissionList, error)
	CreatePermission(context.Context, *CreatePermissionRequest) (*Permission, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*Permission, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*Empty, error)
	// Role
	GetAccountRole(context.Context, *Id) (*AccountRole, error)
	GetListAccountRole(context.Context, *Empty) (*AccountRoleList, error)
	CreateAccountRole(context.Context, *CreateAccountRoleRequest) (*AccountRole, error)
	UpdateAccountRole(context.Context, *UpdateAccountRoleRequest) (*AccountRole, error)
	DeleteAccountRole(context.Context, *DeleteAccountRoleRequest) (*Empty, error)
	// Activity
	GetUserActivity(context.Context, *AccountId) (*UserActivityList, error)
	SaveUserActivity(context.Context, *UserActivity) (*UserActivity, error)
	mustEmbedUnimplementedAccountManagementServer()
}

// UnimplementedAccountManagementServer must be embedded to have forward compatible implementations.
type UnimplementedAccountManagementServer struct {
}

func (UnimplementedAccountManagementServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountManagementServer) ForgotPassword(context.Context, *ForgotPasswordRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedAccountManagementServer) ResetPassword(context.Context, *ResetPasswordRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedAccountManagementServer) GetAccount(context.Context, *Id) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountManagementServer) GetListAccount(context.Context, *GetListAccountRequest) (*AccountList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListAccount not implemented")
}
func (UnimplementedAccountManagementServer) CreateAccount(context.Context, *CreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountManagementServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountManagementServer) ChangePassword(context.Context, *ChangePasswordRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAccountManagementServer) DeactiveAccount(context.Context, *DeactiveAccountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactiveAccount not implemented")
}
func (UnimplementedAccountManagementServer) ActiveAccount(context.Context, *ActiveAccountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveAccount not implemented")
}
func (UnimplementedAccountManagementServer) GetPermission(context.Context, *Id) (*Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedAccountManagementServer) GetListPermission(context.Context, *Empty) (*PermissionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPermission not implemented")
}
func (UnimplementedAccountManagementServer) CreatePermission(context.Context, *CreatePermissionRequest) (*Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedAccountManagementServer) UpdatePermission(context.Context, *UpdatePermissionRequest) (*Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedAccountManagementServer) DeletePermission(context.Context, *DeletePermissionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedAccountManagementServer) GetAccountRole(context.Context, *Id) (*AccountRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountRole not implemented")
}
func (UnimplementedAccountManagementServer) GetListAccountRole(context.Context, *Empty) (*AccountRoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListAccountRole not implemented")
}
func (UnimplementedAccountManagementServer) CreateAccountRole(context.Context, *CreateAccountRoleRequest) (*AccountRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountRole not implemented")
}
func (UnimplementedAccountManagementServer) UpdateAccountRole(context.Context, *UpdateAccountRoleRequest) (*AccountRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountRole not implemented")
}
func (UnimplementedAccountManagementServer) DeleteAccountRole(context.Context, *DeleteAccountRoleRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountRole not implemented")
}
func (UnimplementedAccountManagementServer) GetUserActivity(context.Context, *AccountId) (*UserActivityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActivity not implemented")
}
func (UnimplementedAccountManagementServer) SaveUserActivity(context.Context, *UserActivity) (*UserActivity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserActivity not implemented")
}
func (UnimplementedAccountManagementServer) mustEmbedUnimplementedAccountManagementServer() {}

// UnsafeAccountManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountManagementServer will
// result in compilation errors.
type UnsafeAccountManagementServer interface {
	mustEmbedUnimplementedAccountManagementServer()
}

func RegisterAccountManagementServer(s grpc.ServiceRegistrar, srv AccountManagementServer) {
	s.RegisterService(&AccountManagement_ServiceDesc, srv)
}

func _AccountManagement_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).GetAccount(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_GetListAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).GetListAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/GetListAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).GetListAccount(ctx, req.(*GetListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_DeactiveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactiveAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).DeactiveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/DeactiveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).DeactiveAccount(ctx, req.(*DeactiveAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_ActiveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActiveAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).ActiveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/ActiveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).ActiveAccount(ctx, req.(*ActiveAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/GetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).GetPermission(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_GetListPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).GetListPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/GetListPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).GetListPermission(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/CreatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/UpdatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_GetAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).GetAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/GetAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).GetAccountRole(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_GetListAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).GetListAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/GetListAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).GetListAccountRole(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_CreateAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).CreateAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/CreateAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).CreateAccountRole(ctx, req.(*CreateAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_UpdateAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).UpdateAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/UpdateAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).UpdateAccountRole(ctx, req.(*UpdateAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_DeleteAccountRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).DeleteAccountRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/DeleteAccountRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).DeleteAccountRole(ctx, req.(*DeleteAccountRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_GetUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).GetUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/GetUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).GetUserActivity(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManagement_SaveUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagementServer).SaveUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_management.AccountManagement/SaveUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagementServer).SaveUserActivity(ctx, req.(*UserActivity))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountManagement_ServiceDesc is the grpc.ServiceDesc for AccountManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account_management.AccountManagement",
	HandlerType: (*AccountManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AccountManagement_Login_Handler,
		},
		{
			MethodName: "ForgotPassword",
			Handler:    _AccountManagement_ForgotPassword_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _AccountManagement_ResetPassword_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountManagement_GetAccount_Handler,
		},
		{
			MethodName: "GetListAccount",
			Handler:    _AccountManagement_GetListAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountManagement_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountManagement_UpdateAccount_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AccountManagement_ChangePassword_Handler,
		},
		{
			MethodName: "DeactiveAccount",
			Handler:    _AccountManagement_DeactiveAccount_Handler,
		},
		{
			MethodName: "ActiveAccount",
			Handler:    _AccountManagement_ActiveAccount_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _AccountManagement_GetPermission_Handler,
		},
		{
			MethodName: "GetListPermission",
			Handler:    _AccountManagement_GetListPermission_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _AccountManagement_CreatePermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _AccountManagement_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _AccountManagement_DeletePermission_Handler,
		},
		{
			MethodName: "GetAccountRole",
			Handler:    _AccountManagement_GetAccountRole_Handler,
		},
		{
			MethodName: "GetListAccountRole",
			Handler:    _AccountManagement_GetListAccountRole_Handler,
		},
		{
			MethodName: "CreateAccountRole",
			Handler:    _AccountManagement_CreateAccountRole_Handler,
		},
		{
			MethodName: "UpdateAccountRole",
			Handler:    _AccountManagement_UpdateAccountRole_Handler,
		},
		{
			MethodName: "DeleteAccountRole",
			Handler:    _AccountManagement_DeleteAccountRole_Handler,
		},
		{
			MethodName: "GetUserActivity",
			Handler:    _AccountManagement_GetUserActivity_Handler,
		},
		{
			MethodName: "SaveUserActivity",
			Handler:    _AccountManagement_SaveUserActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account_management.proto",
}
