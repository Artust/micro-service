// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CorporationClient is the client API for Corporation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CorporationClient interface {
	CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error)
	GetShop(ctx context.Context, in *GetShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error)
	GetListShop(ctx context.Context, in *GetListShopRequest, opts ...grpc.CallOption) (*GetListShopResponse, error)
	UpdateShop(ctx context.Context, in *UpdateShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error)
	DeleteShop(ctx context.Context, in *DeleteShopRequest, opts ...grpc.CallOption) (*DeleteShopResponse, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	GetListDevice(ctx context.Context, in *GetListDeviceRequest, opts ...grpc.CallOption) (*GetListDeviceResponse, error)
	CreateCorporation(ctx context.Context, in *CreateCorporationRequest, opts ...grpc.CallOption) (*CreateCorporationResponse, error)
	GetCorporation(ctx context.Context, in *GetCorporationRequest, opts ...grpc.CallOption) (*CreateCorporationResponse, error)
	GetListCorporation(ctx context.Context, in *GetListCorporationRequest, opts ...grpc.CallOption) (*GetListCorporationResponse, error)
	UpdateCorporation(ctx context.Context, in *UpdateCorporationRequest, opts ...grpc.CallOption) (*CreateCorporationResponse, error)
	DeleteCorporation(ctx context.Context, in *DeleteCorporationRequest, opts ...grpc.CallOption) (*DeleteCorporationResponse, error)
	CreateCenter(ctx context.Context, in *CreateCenterRequest, opts ...grpc.CallOption) (*CreateCenterResponse, error)
	GetCenter(ctx context.Context, in *GetCenterRequest, opts ...grpc.CallOption) (*CreateCenterResponse, error)
	GetListCenter(ctx context.Context, in *GetListCenterRequest, opts ...grpc.CallOption) (*GetListCenterResponse, error)
	UpdateCenter(ctx context.Context, in *UpdateCenterRequest, opts ...grpc.CallOption) (*CreateCenterResponse, error)
	DeleteCenter(ctx context.Context, in *DeleteCenterRequest, opts ...grpc.CallOption) (*DeleteCenterResponse, error)
}

type corporationClient struct {
	cc grpc.ClientConnInterface
}

func NewCorporationClient(cc grpc.ClientConnInterface) CorporationClient {
	return &corporationClient{cc}
}

func (c *corporationClient) CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error) {
	out := new(CreateShopResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/CreateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) GetShop(ctx context.Context, in *GetShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error) {
	out := new(CreateShopResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/GetShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) GetListShop(ctx context.Context, in *GetListShopRequest, opts ...grpc.CallOption) (*GetListShopResponse, error) {
	out := new(GetListShopResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/GetListShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) UpdateShop(ctx context.Context, in *UpdateShopRequest, opts ...grpc.CallOption) (*CreateShopResponse, error) {
	out := new(CreateShopResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/UpdateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) DeleteShop(ctx context.Context, in *DeleteShopRequest, opts ...grpc.CallOption) (*DeleteShopResponse, error) {
	out := new(DeleteShopResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/DeleteShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) GetListDevice(ctx context.Context, in *GetListDeviceRequest, opts ...grpc.CallOption) (*GetListDeviceResponse, error) {
	out := new(GetListDeviceResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/GetListDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) CreateCorporation(ctx context.Context, in *CreateCorporationRequest, opts ...grpc.CallOption) (*CreateCorporationResponse, error) {
	out := new(CreateCorporationResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/CreateCorporation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) GetCorporation(ctx context.Context, in *GetCorporationRequest, opts ...grpc.CallOption) (*CreateCorporationResponse, error) {
	out := new(CreateCorporationResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/GetCorporation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) GetListCorporation(ctx context.Context, in *GetListCorporationRequest, opts ...grpc.CallOption) (*GetListCorporationResponse, error) {
	out := new(GetListCorporationResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/GetListCorporation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) UpdateCorporation(ctx context.Context, in *UpdateCorporationRequest, opts ...grpc.CallOption) (*CreateCorporationResponse, error) {
	out := new(CreateCorporationResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/UpdateCorporation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) DeleteCorporation(ctx context.Context, in *DeleteCorporationRequest, opts ...grpc.CallOption) (*DeleteCorporationResponse, error) {
	out := new(DeleteCorporationResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/DeleteCorporation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) CreateCenter(ctx context.Context, in *CreateCenterRequest, opts ...grpc.CallOption) (*CreateCenterResponse, error) {
	out := new(CreateCenterResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/CreateCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) GetCenter(ctx context.Context, in *GetCenterRequest, opts ...grpc.CallOption) (*CreateCenterResponse, error) {
	out := new(CreateCenterResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/GetCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) GetListCenter(ctx context.Context, in *GetListCenterRequest, opts ...grpc.CallOption) (*GetListCenterResponse, error) {
	out := new(GetListCenterResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/GetListCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) UpdateCenter(ctx context.Context, in *UpdateCenterRequest, opts ...grpc.CallOption) (*CreateCenterResponse, error) {
	out := new(CreateCenterResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/UpdateCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporationClient) DeleteCenter(ctx context.Context, in *DeleteCenterRequest, opts ...grpc.CallOption) (*DeleteCenterResponse, error) {
	out := new(DeleteCenterResponse)
	err := c.cc.Invoke(ctx, "/corporation.Corporation/DeleteCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CorporationServer is the server API for Corporation service.
// All implementations must embed UnimplementedCorporationServer
// for forward compatibility
type CorporationServer interface {
	CreateShop(context.Context, *CreateShopRequest) (*CreateShopResponse, error)
	GetShop(context.Context, *GetShopRequest) (*CreateShopResponse, error)
	GetListShop(context.Context, *GetListShopRequest) (*GetListShopResponse, error)
	UpdateShop(context.Context, *UpdateShopRequest) (*CreateShopResponse, error)
	DeleteShop(context.Context, *DeleteShopRequest) (*DeleteShopResponse, error)
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*CreateDeviceResponse, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*CreateDeviceResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	GetListDevice(context.Context, *GetListDeviceRequest) (*GetListDeviceResponse, error)
	CreateCorporation(context.Context, *CreateCorporationRequest) (*CreateCorporationResponse, error)
	GetCorporation(context.Context, *GetCorporationRequest) (*CreateCorporationResponse, error)
	GetListCorporation(context.Context, *GetListCorporationRequest) (*GetListCorporationResponse, error)
	UpdateCorporation(context.Context, *UpdateCorporationRequest) (*CreateCorporationResponse, error)
	DeleteCorporation(context.Context, *DeleteCorporationRequest) (*DeleteCorporationResponse, error)
	CreateCenter(context.Context, *CreateCenterRequest) (*CreateCenterResponse, error)
	GetCenter(context.Context, *GetCenterRequest) (*CreateCenterResponse, error)
	GetListCenter(context.Context, *GetListCenterRequest) (*GetListCenterResponse, error)
	UpdateCenter(context.Context, *UpdateCenterRequest) (*CreateCenterResponse, error)
	DeleteCenter(context.Context, *DeleteCenterRequest) (*DeleteCenterResponse, error)
	mustEmbedUnimplementedCorporationServer()
}

// UnimplementedCorporationServer must be embedded to have forward compatible implementations.
type UnimplementedCorporationServer struct {
}

func (UnimplementedCorporationServer) CreateShop(context.Context, *CreateShopRequest) (*CreateShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShop not implemented")
}
func (UnimplementedCorporationServer) GetShop(context.Context, *GetShopRequest) (*CreateShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShop not implemented")
}
func (UnimplementedCorporationServer) GetListShop(context.Context, *GetListShopRequest) (*GetListShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListShop not implemented")
}
func (UnimplementedCorporationServer) UpdateShop(context.Context, *UpdateShopRequest) (*CreateShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShop not implemented")
}
func (UnimplementedCorporationServer) DeleteShop(context.Context, *DeleteShopRequest) (*DeleteShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShop not implemented")
}
func (UnimplementedCorporationServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedCorporationServer) GetDevice(context.Context, *GetDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedCorporationServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedCorporationServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedCorporationServer) GetListDevice(context.Context, *GetListDeviceRequest) (*GetListDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListDevice not implemented")
}
func (UnimplementedCorporationServer) CreateCorporation(context.Context, *CreateCorporationRequest) (*CreateCorporationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCorporation not implemented")
}
func (UnimplementedCorporationServer) GetCorporation(context.Context, *GetCorporationRequest) (*CreateCorporationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCorporation not implemented")
}
func (UnimplementedCorporationServer) GetListCorporation(context.Context, *GetListCorporationRequest) (*GetListCorporationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCorporation not implemented")
}
func (UnimplementedCorporationServer) UpdateCorporation(context.Context, *UpdateCorporationRequest) (*CreateCorporationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCorporation not implemented")
}
func (UnimplementedCorporationServer) DeleteCorporation(context.Context, *DeleteCorporationRequest) (*DeleteCorporationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCorporation not implemented")
}
func (UnimplementedCorporationServer) CreateCenter(context.Context, *CreateCenterRequest) (*CreateCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCenter not implemented")
}
func (UnimplementedCorporationServer) GetCenter(context.Context, *GetCenterRequest) (*CreateCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCenter not implemented")
}
func (UnimplementedCorporationServer) GetListCenter(context.Context, *GetListCenterRequest) (*GetListCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCenter not implemented")
}
func (UnimplementedCorporationServer) UpdateCenter(context.Context, *UpdateCenterRequest) (*CreateCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCenter not implemented")
}
func (UnimplementedCorporationServer) DeleteCenter(context.Context, *DeleteCenterRequest) (*DeleteCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCenter not implemented")
}
func (UnimplementedCorporationServer) mustEmbedUnimplementedCorporationServer() {}

// UnsafeCorporationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CorporationServer will
// result in compilation errors.
type UnsafeCorporationServer interface {
	mustEmbedUnimplementedCorporationServer()
}

func RegisterCorporationServer(s grpc.ServiceRegistrar, srv CorporationServer) {
	s.RegisterService(&Corporation_ServiceDesc, srv)
}

func _Corporation_CreateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).CreateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/CreateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).CreateShop(ctx, req.(*CreateShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_GetShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).GetShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/GetShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).GetShop(ctx, req.(*GetShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_GetListShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).GetListShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/GetListShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).GetListShop(ctx, req.(*GetListShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_UpdateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).UpdateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/UpdateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).UpdateShop(ctx, req.(*UpdateShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_DeleteShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).DeleteShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/DeleteShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).DeleteShop(ctx, req.(*DeleteShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_GetListDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).GetListDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/GetListDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).GetListDevice(ctx, req.(*GetListDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_CreateCorporation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCorporationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).CreateCorporation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/CreateCorporation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).CreateCorporation(ctx, req.(*CreateCorporationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_GetCorporation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorporationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).GetCorporation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/GetCorporation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).GetCorporation(ctx, req.(*GetCorporationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_GetListCorporation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCorporationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).GetListCorporation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/GetListCorporation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).GetListCorporation(ctx, req.(*GetListCorporationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_UpdateCorporation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCorporationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).UpdateCorporation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/UpdateCorporation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).UpdateCorporation(ctx, req.(*UpdateCorporationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_DeleteCorporation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCorporationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).DeleteCorporation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/DeleteCorporation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).DeleteCorporation(ctx, req.(*DeleteCorporationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_CreateCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).CreateCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/CreateCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).CreateCenter(ctx, req.(*CreateCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_GetCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).GetCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/GetCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).GetCenter(ctx, req.(*GetCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_GetListCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).GetListCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/GetListCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).GetListCenter(ctx, req.(*GetListCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_UpdateCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).UpdateCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/UpdateCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).UpdateCenter(ctx, req.(*UpdateCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Corporation_DeleteCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporationServer).DeleteCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporation.Corporation/DeleteCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporationServer).DeleteCenter(ctx, req.(*DeleteCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Corporation_ServiceDesc is the grpc.ServiceDesc for Corporation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Corporation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "corporation.Corporation",
	HandlerType: (*CorporationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShop",
			Handler:    _Corporation_CreateShop_Handler,
		},
		{
			MethodName: "GetShop",
			Handler:    _Corporation_GetShop_Handler,
		},
		{
			MethodName: "GetListShop",
			Handler:    _Corporation_GetListShop_Handler,
		},
		{
			MethodName: "UpdateShop",
			Handler:    _Corporation_UpdateShop_Handler,
		},
		{
			MethodName: "DeleteShop",
			Handler:    _Corporation_DeleteShop_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Corporation_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _Corporation_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _Corporation_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Corporation_DeleteDevice_Handler,
		},
		{
			MethodName: "GetListDevice",
			Handler:    _Corporation_GetListDevice_Handler,
		},
		{
			MethodName: "CreateCorporation",
			Handler:    _Corporation_CreateCorporation_Handler,
		},
		{
			MethodName: "GetCorporation",
			Handler:    _Corporation_GetCorporation_Handler,
		},
		{
			MethodName: "GetListCorporation",
			Handler:    _Corporation_GetListCorporation_Handler,
		},
		{
			MethodName: "UpdateCorporation",
			Handler:    _Corporation_UpdateCorporation_Handler,
		},
		{
			MethodName: "DeleteCorporation",
			Handler:    _Corporation_DeleteCorporation_Handler,
		},
		{
			MethodName: "CreateCenter",
			Handler:    _Corporation_CreateCenter_Handler,
		},
		{
			MethodName: "GetCenter",
			Handler:    _Corporation_GetCenter_Handler,
		},
		{
			MethodName: "GetListCenter",
			Handler:    _Corporation_GetListCenter_Handler,
		},
		{
			MethodName: "UpdateCenter",
			Handler:    _Corporation_UpdateCenter_Handler,
		},
		{
			MethodName: "DeleteCenter",
			Handler:    _Corporation_DeleteCenter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "corporation.proto",
}
