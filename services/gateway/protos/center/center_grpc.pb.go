// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CenterClient is the client API for Center service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterClient interface {
	CreateRoutine(ctx context.Context, in *CreateRoutineRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error)
	GetRoutine(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error)
	GetListRoutine(ctx context.Context, in *GetListRoutineRequest, opts ...grpc.CallOption) (*GetListRoutineResponse, error)
	UpdateRoutine(ctx context.Context, in *UpdateRoutineRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error)
	DeleteRoutine(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetListRoutineByCategory(ctx context.Context, in *GetListRoutineByCategoryRequest, opts ...grpc.CallOption) (*GetListRoutineByCategoryResponse, error)
	CreateAvatar(ctx context.Context, in *CreateAvatarRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error)
	GetAvatar(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error)
	GetListAvatar(ctx context.Context, in *GetListAvatarRequest, opts ...grpc.CallOption) (*GetListAvatarResponse, error)
	UpdateAvatar(ctx context.Context, in *CreateAvatarRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error)
	DeleteAvatar(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateRoutineCategory(ctx context.Context, in *CreateRoutineCategoryRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error)
	GetRoutineCategory(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error)
	GetListRoutineCategory(ctx context.Context, in *GetListRoutineCategoryRequest, opts ...grpc.CallOption) (*GetListRoutineCategoryResponse, error)
	UpdateRoutineCategory(ctx context.Context, in *UpdateRoutineCategoryRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error)
	DeleteRoutineCategory(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateServiceTemplate(ctx context.Context, in *CreateServiceTemplateRequest, opts ...grpc.CallOption) (*CreateServiceTemplateResponse, error)
	GetServiceTemplate(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateServiceTemplateResponse, error)
	GetListServiceTemplate(ctx context.Context, in *GetListServiceTemplateRequest, opts ...grpc.CallOption) (*GetListServiceTemplateResponse, error)
	UpdateServiceTemplate(ctx context.Context, in *UpdateServiceTemplateRequest, opts ...grpc.CallOption) (*CreateServiceTemplateResponse, error)
	DeleteServiceTemplate(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateServiceTemplateCategory(ctx context.Context, in *CreateServiceTemplateCategoryRequest, opts ...grpc.CallOption) (*CreateServiceTemplateCategoryResponse, error)
	GetServiceTemplateCategory(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateServiceTemplateCategoryResponse, error)
	GetListServiceTemplateCategory(ctx context.Context, in *GetListServiceTemplateCategoryRequest, opts ...grpc.CallOption) (*GetListServiceTemplateCategoryResponse, error)
	UpdateServiceTemplateCategory(ctx context.Context, in *UpdateServiceTemplateCategoryRequest, opts ...grpc.CallOption) (*CreateServiceTemplateCategoryResponse, error)
	DeleteServiceTemplateCategory(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type centerClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterClient(cc grpc.ClientConnInterface) CenterClient {
	return &centerClient{cc}
}

func (c *centerClient) CreateRoutine(ctx context.Context, in *CreateRoutineRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error) {
	out := new(CreateRoutineResponse)
	err := c.cc.Invoke(ctx, "/center.Center/CreateRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetRoutine(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error) {
	out := new(CreateRoutineResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetListRoutine(ctx context.Context, in *GetListRoutineRequest, opts ...grpc.CallOption) (*GetListRoutineResponse, error) {
	out := new(GetListRoutineResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetListRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UpdateRoutine(ctx context.Context, in *UpdateRoutineRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error) {
	out := new(CreateRoutineResponse)
	err := c.cc.Invoke(ctx, "/center.Center/UpdateRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) DeleteRoutine(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/center.Center/DeleteRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetListRoutineByCategory(ctx context.Context, in *GetListRoutineByCategoryRequest, opts ...grpc.CallOption) (*GetListRoutineByCategoryResponse, error) {
	out := new(GetListRoutineByCategoryResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetListRoutineByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) CreateAvatar(ctx context.Context, in *CreateAvatarRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error) {
	out := new(CreateAvatarResponse)
	err := c.cc.Invoke(ctx, "/center.Center/CreateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetAvatar(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error) {
	out := new(CreateAvatarResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetListAvatar(ctx context.Context, in *GetListAvatarRequest, opts ...grpc.CallOption) (*GetListAvatarResponse, error) {
	out := new(GetListAvatarResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetListAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UpdateAvatar(ctx context.Context, in *CreateAvatarRequest, opts ...grpc.CallOption) (*CreateAvatarResponse, error) {
	out := new(CreateAvatarResponse)
	err := c.cc.Invoke(ctx, "/center.Center/UpdateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) DeleteAvatar(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/center.Center/DeleteAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) CreateRoutineCategory(ctx context.Context, in *CreateRoutineCategoryRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error) {
	out := new(CreateRoutineCategoryResponse)
	err := c.cc.Invoke(ctx, "/center.Center/CreateRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetRoutineCategory(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error) {
	out := new(CreateRoutineCategoryResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetListRoutineCategory(ctx context.Context, in *GetListRoutineCategoryRequest, opts ...grpc.CallOption) (*GetListRoutineCategoryResponse, error) {
	out := new(GetListRoutineCategoryResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetListRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UpdateRoutineCategory(ctx context.Context, in *UpdateRoutineCategoryRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error) {
	out := new(CreateRoutineCategoryResponse)
	err := c.cc.Invoke(ctx, "/center.Center/UpdateRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) DeleteRoutineCategory(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/center.Center/DeleteRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) CreateServiceTemplate(ctx context.Context, in *CreateServiceTemplateRequest, opts ...grpc.CallOption) (*CreateServiceTemplateResponse, error) {
	out := new(CreateServiceTemplateResponse)
	err := c.cc.Invoke(ctx, "/center.Center/CreateServiceTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetServiceTemplate(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateServiceTemplateResponse, error) {
	out := new(CreateServiceTemplateResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetServiceTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetListServiceTemplate(ctx context.Context, in *GetListServiceTemplateRequest, opts ...grpc.CallOption) (*GetListServiceTemplateResponse, error) {
	out := new(GetListServiceTemplateResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetListServiceTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UpdateServiceTemplate(ctx context.Context, in *UpdateServiceTemplateRequest, opts ...grpc.CallOption) (*CreateServiceTemplateResponse, error) {
	out := new(CreateServiceTemplateResponse)
	err := c.cc.Invoke(ctx, "/center.Center/UpdateServiceTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) DeleteServiceTemplate(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/center.Center/DeleteServiceTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) CreateServiceTemplateCategory(ctx context.Context, in *CreateServiceTemplateCategoryRequest, opts ...grpc.CallOption) (*CreateServiceTemplateCategoryResponse, error) {
	out := new(CreateServiceTemplateCategoryResponse)
	err := c.cc.Invoke(ctx, "/center.Center/CreateServiceTemplateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetServiceTemplateCategory(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateServiceTemplateCategoryResponse, error) {
	out := new(CreateServiceTemplateCategoryResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetServiceTemplateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) GetListServiceTemplateCategory(ctx context.Context, in *GetListServiceTemplateCategoryRequest, opts ...grpc.CallOption) (*GetListServiceTemplateCategoryResponse, error) {
	out := new(GetListServiceTemplateCategoryResponse)
	err := c.cc.Invoke(ctx, "/center.Center/GetListServiceTemplateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) UpdateServiceTemplateCategory(ctx context.Context, in *UpdateServiceTemplateCategoryRequest, opts ...grpc.CallOption) (*CreateServiceTemplateCategoryResponse, error) {
	out := new(CreateServiceTemplateCategoryResponse)
	err := c.cc.Invoke(ctx, "/center.Center/UpdateServiceTemplateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerClient) DeleteServiceTemplateCategory(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/center.Center/DeleteServiceTemplateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterServer is the server API for Center service.
// All implementations must embed UnimplementedCenterServer
// for forward compatibility
type CenterServer interface {
	CreateRoutine(context.Context, *CreateRoutineRequest) (*CreateRoutineResponse, error)
	GetRoutine(context.Context, *GetByIdRequest) (*CreateRoutineResponse, error)
	GetListRoutine(context.Context, *GetListRoutineRequest) (*GetListRoutineResponse, error)
	UpdateRoutine(context.Context, *UpdateRoutineRequest) (*CreateRoutineResponse, error)
	DeleteRoutine(context.Context, *DeleteByIdRequest) (*DeleteResponse, error)
	GetListRoutineByCategory(context.Context, *GetListRoutineByCategoryRequest) (*GetListRoutineByCategoryResponse, error)
	CreateAvatar(context.Context, *CreateAvatarRequest) (*CreateAvatarResponse, error)
	GetAvatar(context.Context, *GetByIdRequest) (*CreateAvatarResponse, error)
	GetListAvatar(context.Context, *GetListAvatarRequest) (*GetListAvatarResponse, error)
	UpdateAvatar(context.Context, *CreateAvatarRequest) (*CreateAvatarResponse, error)
	DeleteAvatar(context.Context, *DeleteByIdRequest) (*DeleteResponse, error)
	CreateRoutineCategory(context.Context, *CreateRoutineCategoryRequest) (*CreateRoutineCategoryResponse, error)
	GetRoutineCategory(context.Context, *GetByIdRequest) (*CreateRoutineCategoryResponse, error)
	GetListRoutineCategory(context.Context, *GetListRoutineCategoryRequest) (*GetListRoutineCategoryResponse, error)
	UpdateRoutineCategory(context.Context, *UpdateRoutineCategoryRequest) (*CreateRoutineCategoryResponse, error)
	DeleteRoutineCategory(context.Context, *DeleteByIdRequest) (*DeleteResponse, error)
	CreateServiceTemplate(context.Context, *CreateServiceTemplateRequest) (*CreateServiceTemplateResponse, error)
	GetServiceTemplate(context.Context, *GetByIdRequest) (*CreateServiceTemplateResponse, error)
	GetListServiceTemplate(context.Context, *GetListServiceTemplateRequest) (*GetListServiceTemplateResponse, error)
	UpdateServiceTemplate(context.Context, *UpdateServiceTemplateRequest) (*CreateServiceTemplateResponse, error)
	DeleteServiceTemplate(context.Context, *DeleteByIdRequest) (*DeleteResponse, error)
	CreateServiceTemplateCategory(context.Context, *CreateServiceTemplateCategoryRequest) (*CreateServiceTemplateCategoryResponse, error)
	GetServiceTemplateCategory(context.Context, *GetByIdRequest) (*CreateServiceTemplateCategoryResponse, error)
	GetListServiceTemplateCategory(context.Context, *GetListServiceTemplateCategoryRequest) (*GetListServiceTemplateCategoryResponse, error)
	UpdateServiceTemplateCategory(context.Context, *UpdateServiceTemplateCategoryRequest) (*CreateServiceTemplateCategoryResponse, error)
	DeleteServiceTemplateCategory(context.Context, *DeleteByIdRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedCenterServer()
}

// UnimplementedCenterServer must be embedded to have forward compatible implementations.
type UnimplementedCenterServer struct {
}

func (UnimplementedCenterServer) CreateRoutine(context.Context, *CreateRoutineRequest) (*CreateRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoutine not implemented")
}
func (UnimplementedCenterServer) GetRoutine(context.Context, *GetByIdRequest) (*CreateRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutine not implemented")
}
func (UnimplementedCenterServer) GetListRoutine(context.Context, *GetListRoutineRequest) (*GetListRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRoutine not implemented")
}
func (UnimplementedCenterServer) UpdateRoutine(context.Context, *UpdateRoutineRequest) (*CreateRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutine not implemented")
}
func (UnimplementedCenterServer) DeleteRoutine(context.Context, *DeleteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutine not implemented")
}
func (UnimplementedCenterServer) GetListRoutineByCategory(context.Context, *GetListRoutineByCategoryRequest) (*GetListRoutineByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRoutineByCategory not implemented")
}
func (UnimplementedCenterServer) CreateAvatar(context.Context, *CreateAvatarRequest) (*CreateAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAvatar not implemented")
}
func (UnimplementedCenterServer) GetAvatar(context.Context, *GetByIdRequest) (*CreateAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvatar not implemented")
}
func (UnimplementedCenterServer) GetListAvatar(context.Context, *GetListAvatarRequest) (*GetListAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListAvatar not implemented")
}
func (UnimplementedCenterServer) UpdateAvatar(context.Context, *CreateAvatarRequest) (*CreateAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvatar not implemented")
}
func (UnimplementedCenterServer) DeleteAvatar(context.Context, *DeleteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAvatar not implemented")
}
func (UnimplementedCenterServer) CreateRoutineCategory(context.Context, *CreateRoutineCategoryRequest) (*CreateRoutineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoutineCategory not implemented")
}
func (UnimplementedCenterServer) GetRoutineCategory(context.Context, *GetByIdRequest) (*CreateRoutineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutineCategory not implemented")
}
func (UnimplementedCenterServer) GetListRoutineCategory(context.Context, *GetListRoutineCategoryRequest) (*GetListRoutineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRoutineCategory not implemented")
}
func (UnimplementedCenterServer) UpdateRoutineCategory(context.Context, *UpdateRoutineCategoryRequest) (*CreateRoutineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutineCategory not implemented")
}
func (UnimplementedCenterServer) DeleteRoutineCategory(context.Context, *DeleteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutineCategory not implemented")
}
func (UnimplementedCenterServer) CreateServiceTemplate(context.Context, *CreateServiceTemplateRequest) (*CreateServiceTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceTemplate not implemented")
}
func (UnimplementedCenterServer) GetServiceTemplate(context.Context, *GetByIdRequest) (*CreateServiceTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceTemplate not implemented")
}
func (UnimplementedCenterServer) GetListServiceTemplate(context.Context, *GetListServiceTemplateRequest) (*GetListServiceTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListServiceTemplate not implemented")
}
func (UnimplementedCenterServer) UpdateServiceTemplate(context.Context, *UpdateServiceTemplateRequest) (*CreateServiceTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceTemplate not implemented")
}
func (UnimplementedCenterServer) DeleteServiceTemplate(context.Context, *DeleteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceTemplate not implemented")
}
func (UnimplementedCenterServer) CreateServiceTemplateCategory(context.Context, *CreateServiceTemplateCategoryRequest) (*CreateServiceTemplateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceTemplateCategory not implemented")
}
func (UnimplementedCenterServer) GetServiceTemplateCategory(context.Context, *GetByIdRequest) (*CreateServiceTemplateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceTemplateCategory not implemented")
}
func (UnimplementedCenterServer) GetListServiceTemplateCategory(context.Context, *GetListServiceTemplateCategoryRequest) (*GetListServiceTemplateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListServiceTemplateCategory not implemented")
}
func (UnimplementedCenterServer) UpdateServiceTemplateCategory(context.Context, *UpdateServiceTemplateCategoryRequest) (*CreateServiceTemplateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceTemplateCategory not implemented")
}
func (UnimplementedCenterServer) DeleteServiceTemplateCategory(context.Context, *DeleteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceTemplateCategory not implemented")
}
func (UnimplementedCenterServer) mustEmbedUnimplementedCenterServer() {}

// UnsafeCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterServer will
// result in compilation errors.
type UnsafeCenterServer interface {
	mustEmbedUnimplementedCenterServer()
}

func RegisterCenterServer(s grpc.ServiceRegistrar, srv CenterServer) {
	s.RegisterService(&Center_ServiceDesc, srv)
}

func _Center_CreateRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).CreateRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/CreateRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).CreateRoutine(ctx, req.(*CreateRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetRoutine(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetListRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetListRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetListRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetListRoutine(ctx, req.(*GetListRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UpdateRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UpdateRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UpdateRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UpdateRoutine(ctx, req.(*UpdateRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_DeleteRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).DeleteRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/DeleteRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).DeleteRoutine(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetListRoutineByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRoutineByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetListRoutineByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetListRoutineByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetListRoutineByCategory(ctx, req.(*GetListRoutineByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_CreateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).CreateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/CreateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).CreateAvatar(ctx, req.(*CreateAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetAvatar(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetListAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetListAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetListAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetListAvatar(ctx, req.(*GetListAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UpdateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UpdateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UpdateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UpdateAvatar(ctx, req.(*CreateAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_DeleteAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).DeleteAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/DeleteAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).DeleteAvatar(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_CreateRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutineCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).CreateRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/CreateRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).CreateRoutineCategory(ctx, req.(*CreateRoutineCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetRoutineCategory(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetListRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRoutineCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetListRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetListRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetListRoutineCategory(ctx, req.(*GetListRoutineCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UpdateRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutineCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UpdateRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UpdateRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UpdateRoutineCategory(ctx, req.(*UpdateRoutineCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_DeleteRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).DeleteRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/DeleteRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).DeleteRoutineCategory(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_CreateServiceTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).CreateServiceTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/CreateServiceTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).CreateServiceTemplate(ctx, req.(*CreateServiceTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetServiceTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetServiceTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetServiceTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetServiceTemplate(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetListServiceTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListServiceTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetListServiceTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetListServiceTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetListServiceTemplate(ctx, req.(*GetListServiceTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UpdateServiceTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UpdateServiceTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UpdateServiceTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UpdateServiceTemplate(ctx, req.(*UpdateServiceTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_DeleteServiceTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).DeleteServiceTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/DeleteServiceTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).DeleteServiceTemplate(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_CreateServiceTemplateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceTemplateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).CreateServiceTemplateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/CreateServiceTemplateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).CreateServiceTemplateCategory(ctx, req.(*CreateServiceTemplateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetServiceTemplateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetServiceTemplateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetServiceTemplateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetServiceTemplateCategory(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_GetListServiceTemplateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListServiceTemplateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).GetListServiceTemplateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/GetListServiceTemplateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).GetListServiceTemplateCategory(ctx, req.(*GetListServiceTemplateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_UpdateServiceTemplateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceTemplateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).UpdateServiceTemplateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/UpdateServiceTemplateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).UpdateServiceTemplateCategory(ctx, req.(*UpdateServiceTemplateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Center_DeleteServiceTemplateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServer).DeleteServiceTemplateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/center.Center/DeleteServiceTemplateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServer).DeleteServiceTemplateCategory(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Center_ServiceDesc is the grpc.ServiceDesc for Center service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Center_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "center.Center",
	HandlerType: (*CenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoutine",
			Handler:    _Center_CreateRoutine_Handler,
		},
		{
			MethodName: "GetRoutine",
			Handler:    _Center_GetRoutine_Handler,
		},
		{
			MethodName: "GetListRoutine",
			Handler:    _Center_GetListRoutine_Handler,
		},
		{
			MethodName: "UpdateRoutine",
			Handler:    _Center_UpdateRoutine_Handler,
		},
		{
			MethodName: "DeleteRoutine",
			Handler:    _Center_DeleteRoutine_Handler,
		},
		{
			MethodName: "GetListRoutineByCategory",
			Handler:    _Center_GetListRoutineByCategory_Handler,
		},
		{
			MethodName: "CreateAvatar",
			Handler:    _Center_CreateAvatar_Handler,
		},
		{
			MethodName: "GetAvatar",
			Handler:    _Center_GetAvatar_Handler,
		},
		{
			MethodName: "GetListAvatar",
			Handler:    _Center_GetListAvatar_Handler,
		},
		{
			MethodName: "UpdateAvatar",
			Handler:    _Center_UpdateAvatar_Handler,
		},
		{
			MethodName: "DeleteAvatar",
			Handler:    _Center_DeleteAvatar_Handler,
		},
		{
			MethodName: "CreateRoutineCategory",
			Handler:    _Center_CreateRoutineCategory_Handler,
		},
		{
			MethodName: "GetRoutineCategory",
			Handler:    _Center_GetRoutineCategory_Handler,
		},
		{
			MethodName: "GetListRoutineCategory",
			Handler:    _Center_GetListRoutineCategory_Handler,
		},
		{
			MethodName: "UpdateRoutineCategory",
			Handler:    _Center_UpdateRoutineCategory_Handler,
		},
		{
			MethodName: "DeleteRoutineCategory",
			Handler:    _Center_DeleteRoutineCategory_Handler,
		},
		{
			MethodName: "CreateServiceTemplate",
			Handler:    _Center_CreateServiceTemplate_Handler,
		},
		{
			MethodName: "GetServiceTemplate",
			Handler:    _Center_GetServiceTemplate_Handler,
		},
		{
			MethodName: "GetListServiceTemplate",
			Handler:    _Center_GetListServiceTemplate_Handler,
		},
		{
			MethodName: "UpdateServiceTemplate",
			Handler:    _Center_UpdateServiceTemplate_Handler,
		},
		{
			MethodName: "DeleteServiceTemplate",
			Handler:    _Center_DeleteServiceTemplate_Handler,
		},
		{
			MethodName: "CreateServiceTemplateCategory",
			Handler:    _Center_CreateServiceTemplateCategory_Handler,
		},
		{
			MethodName: "GetServiceTemplateCategory",
			Handler:    _Center_GetServiceTemplateCategory_Handler,
		},
		{
			MethodName: "GetListServiceTemplateCategory",
			Handler:    _Center_GetListServiceTemplateCategory_Handler,
		},
		{
			MethodName: "UpdateServiceTemplateCategory",
			Handler:    _Center_UpdateServiceTemplateCategory_Handler,
		},
		{
			MethodName: "DeleteServiceTemplateCategory",
			Handler:    _Center_DeleteServiceTemplateCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "center.proto",
}
