// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// POSClient is the client API for POS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type POSClient interface {
	CreateRoutine(ctx context.Context, in *CreateRoutineRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error)
	GetRoutine(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error)
	GetListRoutine(ctx context.Context, in *GetListRoutineRequest, opts ...grpc.CallOption) (*GetListRoutineResponse, error)
	UpdateRoutine(ctx context.Context, in *UpdateRoutineRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error)
	DeleteRoutine(ctx context.Context, in *DeleteRoutineRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetListRoutineByCategory(ctx context.Context, in *GetListRoutineByCategoryRequest, opts ...grpc.CallOption) (*GetListRoutineByCategoryResponse, error)
	CreateManyRoutine(ctx context.Context, in *CreateManyRoutineRequest, opts ...grpc.CallOption) (*CreateManyRoutineResponse, error)
	TriggerEventOperatorSide(ctx context.Context, in *TriggerEventOperatorSideRequest, opts ...grpc.CallOption) (*TriggerEventOperatorSideResponse, error)
	CreateRoutineCategory(ctx context.Context, in *CreateRoutineCategoryRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error)
	GetListRoutineCategory(ctx context.Context, in *GetListRoutineCategoryRequest, opts ...grpc.CallOption) (*GetListRoutineCategoryResponse, error)
	GetRoutineCategory(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error)
	UpdateRoutineCategory(ctx context.Context, in *UpdateRoutineCategoryRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error)
	DeleteRoutineCategory(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreatePos(ctx context.Context, in *CreatePosRequest, opts ...grpc.CallOption) (*CreatePosResponse, error)
	GetPos(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreatePosResponse, error)
	GetListPos(ctx context.Context, in *GetListPosRequest, opts ...grpc.CallOption) (*GetListPosResponse, error)
	UpdatePos(ctx context.Context, in *UpdatePosRequest, opts ...grpc.CallOption) (*CreatePosResponse, error)
	DeletePos(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateMonitor(ctx context.Context, in *CreateMonitorRequest, opts ...grpc.CallOption) (*CreateMonitorResponse, error)
	GetMonitor(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateMonitorResponse, error)
	GetListMonitor(ctx context.Context, in *GetListMonitorRequest, opts ...grpc.CallOption) (*GetListMonitorResponse, error)
	UpdateMonitor(ctx context.Context, in *UpdateMonitorRequest, opts ...grpc.CallOption) (*CreateMonitorResponse, error)
	DeleteMonitor(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateIpCamera(ctx context.Context, in *CreateIpCameraRequest, opts ...grpc.CallOption) (*CreateIpCameraResponse, error)
	GetIpCamera(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateIpCameraResponse, error)
	UpdateIpCamera(ctx context.Context, in *UpdateIpCameraRequest, opts ...grpc.CallOption) (*CreateIpCameraResponse, error)
	DeleteIpCamera(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetListIpCamera(ctx context.Context, in *GetListIpCameraRequest, opts ...grpc.CallOption) (*GetListIpCameraResponse, error)
}

type pOSClient struct {
	cc grpc.ClientConnInterface
}

func NewPOSClient(cc grpc.ClientConnInterface) POSClient {
	return &pOSClient{cc}
}

func (c *pOSClient) CreateRoutine(ctx context.Context, in *CreateRoutineRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error) {
	out := new(CreateRoutineResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/CreateRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetRoutine(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error) {
	out := new(CreateRoutineResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetListRoutine(ctx context.Context, in *GetListRoutineRequest, opts ...grpc.CallOption) (*GetListRoutineResponse, error) {
	out := new(GetListRoutineResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetListRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) UpdateRoutine(ctx context.Context, in *UpdateRoutineRequest, opts ...grpc.CallOption) (*CreateRoutineResponse, error) {
	out := new(CreateRoutineResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/UpdateRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) DeleteRoutine(ctx context.Context, in *DeleteRoutineRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/DeleteRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetListRoutineByCategory(ctx context.Context, in *GetListRoutineByCategoryRequest, opts ...grpc.CallOption) (*GetListRoutineByCategoryResponse, error) {
	out := new(GetListRoutineByCategoryResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetListRoutineByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) CreateManyRoutine(ctx context.Context, in *CreateManyRoutineRequest, opts ...grpc.CallOption) (*CreateManyRoutineResponse, error) {
	out := new(CreateManyRoutineResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/CreateManyRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) TriggerEventOperatorSide(ctx context.Context, in *TriggerEventOperatorSideRequest, opts ...grpc.CallOption) (*TriggerEventOperatorSideResponse, error) {
	out := new(TriggerEventOperatorSideResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/TriggerEventOperatorSide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) CreateRoutineCategory(ctx context.Context, in *CreateRoutineCategoryRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error) {
	out := new(CreateRoutineCategoryResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/CreateRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetListRoutineCategory(ctx context.Context, in *GetListRoutineCategoryRequest, opts ...grpc.CallOption) (*GetListRoutineCategoryResponse, error) {
	out := new(GetListRoutineCategoryResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetListRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetRoutineCategory(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error) {
	out := new(CreateRoutineCategoryResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) UpdateRoutineCategory(ctx context.Context, in *UpdateRoutineCategoryRequest, opts ...grpc.CallOption) (*CreateRoutineCategoryResponse, error) {
	out := new(CreateRoutineCategoryResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/UpdateRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) DeleteRoutineCategory(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/DeleteRoutineCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) CreatePos(ctx context.Context, in *CreatePosRequest, opts ...grpc.CallOption) (*CreatePosResponse, error) {
	out := new(CreatePosResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/CreatePos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetPos(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreatePosResponse, error) {
	out := new(CreatePosResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetPos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetListPos(ctx context.Context, in *GetListPosRequest, opts ...grpc.CallOption) (*GetListPosResponse, error) {
	out := new(GetListPosResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetListPos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) UpdatePos(ctx context.Context, in *UpdatePosRequest, opts ...grpc.CallOption) (*CreatePosResponse, error) {
	out := new(CreatePosResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/UpdatePos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) DeletePos(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/DeletePos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) CreateMonitor(ctx context.Context, in *CreateMonitorRequest, opts ...grpc.CallOption) (*CreateMonitorResponse, error) {
	out := new(CreateMonitorResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/CreateMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetMonitor(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateMonitorResponse, error) {
	out := new(CreateMonitorResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetListMonitor(ctx context.Context, in *GetListMonitorRequest, opts ...grpc.CallOption) (*GetListMonitorResponse, error) {
	out := new(GetListMonitorResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetListMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) UpdateMonitor(ctx context.Context, in *UpdateMonitorRequest, opts ...grpc.CallOption) (*CreateMonitorResponse, error) {
	out := new(CreateMonitorResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/UpdateMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) DeleteMonitor(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/DeleteMonitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) CreateIpCamera(ctx context.Context, in *CreateIpCameraRequest, opts ...grpc.CallOption) (*CreateIpCameraResponse, error) {
	out := new(CreateIpCameraResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/CreateIpCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetIpCamera(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*CreateIpCameraResponse, error) {
	out := new(CreateIpCameraResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetIpCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) UpdateIpCamera(ctx context.Context, in *UpdateIpCameraRequest, opts ...grpc.CallOption) (*CreateIpCameraResponse, error) {
	out := new(CreateIpCameraResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/UpdateIpCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) DeleteIpCamera(ctx context.Context, in *DeleteByIdRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/DeleteIpCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOSClient) GetListIpCamera(ctx context.Context, in *GetListIpCameraRequest, opts ...grpc.CallOption) (*GetListIpCameraResponse, error) {
	out := new(GetListIpCameraResponse)
	err := c.cc.Invoke(ctx, "/pos.POS/GetListIpCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// POSServer is the server API for POS service.
// All implementations must embed UnimplementedPOSServer
// for forward compatibility
type POSServer interface {
	CreateRoutine(context.Context, *CreateRoutineRequest) (*CreateRoutineResponse, error)
	GetRoutine(context.Context, *GetByIdRequest) (*CreateRoutineResponse, error)
	GetListRoutine(context.Context, *GetListRoutineRequest) (*GetListRoutineResponse, error)
	UpdateRoutine(context.Context, *UpdateRoutineRequest) (*CreateRoutineResponse, error)
	DeleteRoutine(context.Context, *DeleteRoutineRequest) (*DeleteResponse, error)
	GetListRoutineByCategory(context.Context, *GetListRoutineByCategoryRequest) (*GetListRoutineByCategoryResponse, error)
	CreateManyRoutine(context.Context, *CreateManyRoutineRequest) (*CreateManyRoutineResponse, error)
	TriggerEventOperatorSide(context.Context, *TriggerEventOperatorSideRequest) (*TriggerEventOperatorSideResponse, error)
	CreateRoutineCategory(context.Context, *CreateRoutineCategoryRequest) (*CreateRoutineCategoryResponse, error)
	GetListRoutineCategory(context.Context, *GetListRoutineCategoryRequest) (*GetListRoutineCategoryResponse, error)
	GetRoutineCategory(context.Context, *GetByIdRequest) (*CreateRoutineCategoryResponse, error)
	UpdateRoutineCategory(context.Context, *UpdateRoutineCategoryRequest) (*CreateRoutineCategoryResponse, error)
	DeleteRoutineCategory(context.Context, *DeleteByIdRequest) (*DeleteResponse, error)
	CreatePos(context.Context, *CreatePosRequest) (*CreatePosResponse, error)
	GetPos(context.Context, *GetByIdRequest) (*CreatePosResponse, error)
	GetListPos(context.Context, *GetListPosRequest) (*GetListPosResponse, error)
	UpdatePos(context.Context, *UpdatePosRequest) (*CreatePosResponse, error)
	DeletePos(context.Context, *DeleteByIdRequest) (*DeleteResponse, error)
	CreateMonitor(context.Context, *CreateMonitorRequest) (*CreateMonitorResponse, error)
	GetMonitor(context.Context, *GetByIdRequest) (*CreateMonitorResponse, error)
	GetListMonitor(context.Context, *GetListMonitorRequest) (*GetListMonitorResponse, error)
	UpdateMonitor(context.Context, *UpdateMonitorRequest) (*CreateMonitorResponse, error)
	DeleteMonitor(context.Context, *DeleteByIdRequest) (*DeleteResponse, error)
	CreateIpCamera(context.Context, *CreateIpCameraRequest) (*CreateIpCameraResponse, error)
	GetIpCamera(context.Context, *GetByIdRequest) (*CreateIpCameraResponse, error)
	UpdateIpCamera(context.Context, *UpdateIpCameraRequest) (*CreateIpCameraResponse, error)
	DeleteIpCamera(context.Context, *DeleteByIdRequest) (*DeleteResponse, error)
	GetListIpCamera(context.Context, *GetListIpCameraRequest) (*GetListIpCameraResponse, error)
	mustEmbedUnimplementedPOSServer()
}

// UnimplementedPOSServer must be embedded to have forward compatible implementations.
type UnimplementedPOSServer struct {
}

func (UnimplementedPOSServer) CreateRoutine(context.Context, *CreateRoutineRequest) (*CreateRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoutine not implemented")
}
func (UnimplementedPOSServer) GetRoutine(context.Context, *GetByIdRequest) (*CreateRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutine not implemented")
}
func (UnimplementedPOSServer) GetListRoutine(context.Context, *GetListRoutineRequest) (*GetListRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRoutine not implemented")
}
func (UnimplementedPOSServer) UpdateRoutine(context.Context, *UpdateRoutineRequest) (*CreateRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutine not implemented")
}
func (UnimplementedPOSServer) DeleteRoutine(context.Context, *DeleteRoutineRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutine not implemented")
}
func (UnimplementedPOSServer) GetListRoutineByCategory(context.Context, *GetListRoutineByCategoryRequest) (*GetListRoutineByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRoutineByCategory not implemented")
}
func (UnimplementedPOSServer) CreateManyRoutine(context.Context, *CreateManyRoutineRequest) (*CreateManyRoutineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManyRoutine not implemented")
}
func (UnimplementedPOSServer) TriggerEventOperatorSide(context.Context, *TriggerEventOperatorSideRequest) (*TriggerEventOperatorSideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerEventOperatorSide not implemented")
}
func (UnimplementedPOSServer) CreateRoutineCategory(context.Context, *CreateRoutineCategoryRequest) (*CreateRoutineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoutineCategory not implemented")
}
func (UnimplementedPOSServer) GetListRoutineCategory(context.Context, *GetListRoutineCategoryRequest) (*GetListRoutineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRoutineCategory not implemented")
}
func (UnimplementedPOSServer) GetRoutineCategory(context.Context, *GetByIdRequest) (*CreateRoutineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutineCategory not implemented")
}
func (UnimplementedPOSServer) UpdateRoutineCategory(context.Context, *UpdateRoutineCategoryRequest) (*CreateRoutineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutineCategory not implemented")
}
func (UnimplementedPOSServer) DeleteRoutineCategory(context.Context, *DeleteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutineCategory not implemented")
}
func (UnimplementedPOSServer) CreatePos(context.Context, *CreatePosRequest) (*CreatePosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePos not implemented")
}
func (UnimplementedPOSServer) GetPos(context.Context, *GetByIdRequest) (*CreatePosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPos not implemented")
}
func (UnimplementedPOSServer) GetListPos(context.Context, *GetListPosRequest) (*GetListPosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPos not implemented")
}
func (UnimplementedPOSServer) UpdatePos(context.Context, *UpdatePosRequest) (*CreatePosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePos not implemented")
}
func (UnimplementedPOSServer) DeletePos(context.Context, *DeleteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePos not implemented")
}
func (UnimplementedPOSServer) CreateMonitor(context.Context, *CreateMonitorRequest) (*CreateMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitor not implemented")
}
func (UnimplementedPOSServer) GetMonitor(context.Context, *GetByIdRequest) (*CreateMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitor not implemented")
}
func (UnimplementedPOSServer) GetListMonitor(context.Context, *GetListMonitorRequest) (*GetListMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListMonitor not implemented")
}
func (UnimplementedPOSServer) UpdateMonitor(context.Context, *UpdateMonitorRequest) (*CreateMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitor not implemented")
}
func (UnimplementedPOSServer) DeleteMonitor(context.Context, *DeleteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMonitor not implemented")
}
func (UnimplementedPOSServer) CreateIpCamera(context.Context, *CreateIpCameraRequest) (*CreateIpCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpCamera not implemented")
}
func (UnimplementedPOSServer) GetIpCamera(context.Context, *GetByIdRequest) (*CreateIpCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpCamera not implemented")
}
func (UnimplementedPOSServer) UpdateIpCamera(context.Context, *UpdateIpCameraRequest) (*CreateIpCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIpCamera not implemented")
}
func (UnimplementedPOSServer) DeleteIpCamera(context.Context, *DeleteByIdRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpCamera not implemented")
}
func (UnimplementedPOSServer) GetListIpCamera(context.Context, *GetListIpCameraRequest) (*GetListIpCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListIpCamera not implemented")
}
func (UnimplementedPOSServer) mustEmbedUnimplementedPOSServer() {}

// UnsafePOSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to POSServer will
// result in compilation errors.
type UnsafePOSServer interface {
	mustEmbedUnimplementedPOSServer()
}

func RegisterPOSServer(s grpc.ServiceRegistrar, srv POSServer) {
	s.RegisterService(&POS_ServiceDesc, srv)
}

func _POS_CreateRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).CreateRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/CreateRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).CreateRoutine(ctx, req.(*CreateRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetRoutine(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetListRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetListRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetListRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetListRoutine(ctx, req.(*GetListRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_UpdateRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).UpdateRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/UpdateRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).UpdateRoutine(ctx, req.(*UpdateRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_DeleteRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).DeleteRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/DeleteRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).DeleteRoutine(ctx, req.(*DeleteRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetListRoutineByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRoutineByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetListRoutineByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetListRoutineByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetListRoutineByCategory(ctx, req.(*GetListRoutineByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_CreateManyRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManyRoutineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).CreateManyRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/CreateManyRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).CreateManyRoutine(ctx, req.(*CreateManyRoutineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_TriggerEventOperatorSide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerEventOperatorSideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).TriggerEventOperatorSide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/TriggerEventOperatorSide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).TriggerEventOperatorSide(ctx, req.(*TriggerEventOperatorSideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_CreateRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutineCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).CreateRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/CreateRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).CreateRoutineCategory(ctx, req.(*CreateRoutineCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetListRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRoutineCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetListRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetListRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetListRoutineCategory(ctx, req.(*GetListRoutineCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetRoutineCategory(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_UpdateRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutineCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).UpdateRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/UpdateRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).UpdateRoutineCategory(ctx, req.(*UpdateRoutineCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_DeleteRoutineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).DeleteRoutineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/DeleteRoutineCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).DeleteRoutineCategory(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_CreatePos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).CreatePos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/CreatePos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).CreatePos(ctx, req.(*CreatePosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetPos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetPos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetPos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetPos(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetListPos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetListPos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetListPos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetListPos(ctx, req.(*GetListPosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_UpdatePos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).UpdatePos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/UpdatePos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).UpdatePos(ctx, req.(*UpdatePosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_DeletePos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).DeletePos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/DeletePos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).DeletePos(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_CreateMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).CreateMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/CreateMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).CreateMonitor(ctx, req.(*CreateMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetMonitor(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetListMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetListMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetListMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetListMonitor(ctx, req.(*GetListMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_UpdateMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).UpdateMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/UpdateMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).UpdateMonitor(ctx, req.(*UpdateMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_DeleteMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).DeleteMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/DeleteMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).DeleteMonitor(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_CreateIpCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).CreateIpCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/CreateIpCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).CreateIpCamera(ctx, req.(*CreateIpCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetIpCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetIpCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetIpCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetIpCamera(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_UpdateIpCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIpCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).UpdateIpCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/UpdateIpCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).UpdateIpCamera(ctx, req.(*UpdateIpCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_DeleteIpCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).DeleteIpCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/DeleteIpCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).DeleteIpCamera(ctx, req.(*DeleteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POS_GetListIpCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListIpCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POSServer).GetListIpCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos.POS/GetListIpCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POSServer).GetListIpCamera(ctx, req.(*GetListIpCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// POS_ServiceDesc is the grpc.ServiceDesc for POS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var POS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.POS",
	HandlerType: (*POSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoutine",
			Handler:    _POS_CreateRoutine_Handler,
		},
		{
			MethodName: "GetRoutine",
			Handler:    _POS_GetRoutine_Handler,
		},
		{
			MethodName: "GetListRoutine",
			Handler:    _POS_GetListRoutine_Handler,
		},
		{
			MethodName: "UpdateRoutine",
			Handler:    _POS_UpdateRoutine_Handler,
		},
		{
			MethodName: "DeleteRoutine",
			Handler:    _POS_DeleteRoutine_Handler,
		},
		{
			MethodName: "GetListRoutineByCategory",
			Handler:    _POS_GetListRoutineByCategory_Handler,
		},
		{
			MethodName: "CreateManyRoutine",
			Handler:    _POS_CreateManyRoutine_Handler,
		},
		{
			MethodName: "TriggerEventOperatorSide",
			Handler:    _POS_TriggerEventOperatorSide_Handler,
		},
		{
			MethodName: "CreateRoutineCategory",
			Handler:    _POS_CreateRoutineCategory_Handler,
		},
		{
			MethodName: "GetListRoutineCategory",
			Handler:    _POS_GetListRoutineCategory_Handler,
		},
		{
			MethodName: "GetRoutineCategory",
			Handler:    _POS_GetRoutineCategory_Handler,
		},
		{
			MethodName: "UpdateRoutineCategory",
			Handler:    _POS_UpdateRoutineCategory_Handler,
		},
		{
			MethodName: "DeleteRoutineCategory",
			Handler:    _POS_DeleteRoutineCategory_Handler,
		},
		{
			MethodName: "CreatePos",
			Handler:    _POS_CreatePos_Handler,
		},
		{
			MethodName: "GetPos",
			Handler:    _POS_GetPos_Handler,
		},
		{
			MethodName: "GetListPos",
			Handler:    _POS_GetListPos_Handler,
		},
		{
			MethodName: "UpdatePos",
			Handler:    _POS_UpdatePos_Handler,
		},
		{
			MethodName: "DeletePos",
			Handler:    _POS_DeletePos_Handler,
		},
		{
			MethodName: "CreateMonitor",
			Handler:    _POS_CreateMonitor_Handler,
		},
		{
			MethodName: "GetMonitor",
			Handler:    _POS_GetMonitor_Handler,
		},
		{
			MethodName: "GetListMonitor",
			Handler:    _POS_GetListMonitor_Handler,
		},
		{
			MethodName: "UpdateMonitor",
			Handler:    _POS_UpdateMonitor_Handler,
		},
		{
			MethodName: "DeleteMonitor",
			Handler:    _POS_DeleteMonitor_Handler,
		},
		{
			MethodName: "CreateIpCamera",
			Handler:    _POS_CreateIpCamera_Handler,
		},
		{
			MethodName: "GetIpCamera",
			Handler:    _POS_GetIpCamera_Handler,
		},
		{
			MethodName: "UpdateIpCamera",
			Handler:    _POS_UpdateIpCamera_Handler,
		},
		{
			MethodName: "DeleteIpCamera",
			Handler:    _POS_DeleteIpCamera_Handler,
		},
		{
			MethodName: "GetListIpCamera",
			Handler:    _POS_GetListIpCamera_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pos.proto",
}
