// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TalkSessionClient is the client API for TalkSession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalkSessionClient interface {
	SaveSpeechToText(ctx context.Context, in *SaveSpeechToTextRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateTalkSessionHistory(ctx context.Context, in *CreateTalkSessionHistoryRequest, opts ...grpc.CallOption) (*CreateTalkSessionHistoryResponse, error)
	EndTalkSessionHistory(ctx context.Context, in *EndTalkSessionHistoryRequest, opts ...grpc.CallOption) (*EndTalkSessionHistoryResponse, error)
	GetTalkSessionHistoryByTalkSession(ctx context.Context, in *GetTalkSessionHistoryByTalkSessionRequest, opts ...grpc.CallOption) (*GetTalkSessionHistoryByTalkSessionResponse, error)
	CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error)
	GetListNote(ctx context.Context, in *GetListNoteRequest, opts ...grpc.CallOption) (*GetListNoteResponse, error)
	UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error)
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*DeleteNoteResponse, error)
	CreateTalkSession(ctx context.Context, in *CreateTalkSessionRequest, opts ...grpc.CallOption) (*CreateTalkSessionResponse, error)
	UpdateTalkSession(ctx context.Context, in *UpdateTalkSessionRequest, opts ...grpc.CallOption) (*UpdateTalkSessionResponse, error)
	GetTalkSession(ctx context.Context, in *GetTalkSessionRequest, opts ...grpc.CallOption) (*GetTalkSessionResponse, error)
	DeleteTalkSession(ctx context.Context, in *DeleteTalkSessionRequest, opts ...grpc.CallOption) (*DeleteTalkSessionResponse, error)
}

type talkSessionClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkSessionClient(cc grpc.ClientConnInterface) TalkSessionClient {
	return &talkSessionClient{cc}
}

func (c *talkSessionClient) SaveSpeechToText(ctx context.Context, in *SaveSpeechToTextRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/SaveSpeechToText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) CreateTalkSessionHistory(ctx context.Context, in *CreateTalkSessionHistoryRequest, opts ...grpc.CallOption) (*CreateTalkSessionHistoryResponse, error) {
	out := new(CreateTalkSessionHistoryResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/CreateTalkSessionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) EndTalkSessionHistory(ctx context.Context, in *EndTalkSessionHistoryRequest, opts ...grpc.CallOption) (*EndTalkSessionHistoryResponse, error) {
	out := new(EndTalkSessionHistoryResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/EndTalkSessionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) GetTalkSessionHistoryByTalkSession(ctx context.Context, in *GetTalkSessionHistoryByTalkSessionRequest, opts ...grpc.CallOption) (*GetTalkSessionHistoryByTalkSessionResponse, error) {
	out := new(GetTalkSessionHistoryByTalkSessionResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/GetTalkSessionHistoryByTalkSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error) {
	out := new(CreateNoteResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/CreateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) GetListNote(ctx context.Context, in *GetListNoteRequest, opts ...grpc.CallOption) (*GetListNoteResponse, error) {
	out := new(GetListNoteResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/GetListNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) UpdateNote(ctx context.Context, in *UpdateNoteRequest, opts ...grpc.CallOption) (*CreateNoteResponse, error) {
	out := new(CreateNoteResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/UpdateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*DeleteNoteResponse, error) {
	out := new(DeleteNoteResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) CreateTalkSession(ctx context.Context, in *CreateTalkSessionRequest, opts ...grpc.CallOption) (*CreateTalkSessionResponse, error) {
	out := new(CreateTalkSessionResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/CreateTalkSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) UpdateTalkSession(ctx context.Context, in *UpdateTalkSessionRequest, opts ...grpc.CallOption) (*UpdateTalkSessionResponse, error) {
	out := new(UpdateTalkSessionResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/UpdateTalkSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) GetTalkSession(ctx context.Context, in *GetTalkSessionRequest, opts ...grpc.CallOption) (*GetTalkSessionResponse, error) {
	out := new(GetTalkSessionResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/GetTalkSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkSessionClient) DeleteTalkSession(ctx context.Context, in *DeleteTalkSessionRequest, opts ...grpc.CallOption) (*DeleteTalkSessionResponse, error) {
	out := new(DeleteTalkSessionResponse)
	err := c.cc.Invoke(ctx, "/talk_session.TalkSession/DeleteTalkSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkSessionServer is the server API for TalkSession service.
// All implementations must embed UnimplementedTalkSessionServer
// for forward compatibility
type TalkSessionServer interface {
	SaveSpeechToText(context.Context, *SaveSpeechToTextRequest) (*Empty, error)
	CreateTalkSessionHistory(context.Context, *CreateTalkSessionHistoryRequest) (*CreateTalkSessionHistoryResponse, error)
	EndTalkSessionHistory(context.Context, *EndTalkSessionHistoryRequest) (*EndTalkSessionHistoryResponse, error)
	GetTalkSessionHistoryByTalkSession(context.Context, *GetTalkSessionHistoryByTalkSessionRequest) (*GetTalkSessionHistoryByTalkSessionResponse, error)
	CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteResponse, error)
	GetListNote(context.Context, *GetListNoteRequest) (*GetListNoteResponse, error)
	UpdateNote(context.Context, *UpdateNoteRequest) (*CreateNoteResponse, error)
	DeleteNote(context.Context, *DeleteNoteRequest) (*DeleteNoteResponse, error)
	CreateTalkSession(context.Context, *CreateTalkSessionRequest) (*CreateTalkSessionResponse, error)
	UpdateTalkSession(context.Context, *UpdateTalkSessionRequest) (*UpdateTalkSessionResponse, error)
	GetTalkSession(context.Context, *GetTalkSessionRequest) (*GetTalkSessionResponse, error)
	DeleteTalkSession(context.Context, *DeleteTalkSessionRequest) (*DeleteTalkSessionResponse, error)
	mustEmbedUnimplementedTalkSessionServer()
}

// UnimplementedTalkSessionServer must be embedded to have forward compatible implementations.
type UnimplementedTalkSessionServer struct {
}

func (UnimplementedTalkSessionServer) SaveSpeechToText(context.Context, *SaveSpeechToTextRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSpeechToText not implemented")
}
func (UnimplementedTalkSessionServer) CreateTalkSessionHistory(context.Context, *CreateTalkSessionHistoryRequest) (*CreateTalkSessionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTalkSessionHistory not implemented")
}
func (UnimplementedTalkSessionServer) EndTalkSessionHistory(context.Context, *EndTalkSessionHistoryRequest) (*EndTalkSessionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTalkSessionHistory not implemented")
}
func (UnimplementedTalkSessionServer) GetTalkSessionHistoryByTalkSession(context.Context, *GetTalkSessionHistoryByTalkSessionRequest) (*GetTalkSessionHistoryByTalkSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalkSessionHistoryByTalkSession not implemented")
}
func (UnimplementedTalkSessionServer) CreateNote(context.Context, *CreateNoteRequest) (*CreateNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedTalkSessionServer) GetListNote(context.Context, *GetListNoteRequest) (*GetListNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListNote not implemented")
}
func (UnimplementedTalkSessionServer) UpdateNote(context.Context, *UpdateNoteRequest) (*CreateNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedTalkSessionServer) DeleteNote(context.Context, *DeleteNoteRequest) (*DeleteNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedTalkSessionServer) CreateTalkSession(context.Context, *CreateTalkSessionRequest) (*CreateTalkSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTalkSession not implemented")
}
func (UnimplementedTalkSessionServer) UpdateTalkSession(context.Context, *UpdateTalkSessionRequest) (*UpdateTalkSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTalkSession not implemented")
}
func (UnimplementedTalkSessionServer) GetTalkSession(context.Context, *GetTalkSessionRequest) (*GetTalkSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalkSession not implemented")
}
func (UnimplementedTalkSessionServer) DeleteTalkSession(context.Context, *DeleteTalkSessionRequest) (*DeleteTalkSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTalkSession not implemented")
}
func (UnimplementedTalkSessionServer) mustEmbedUnimplementedTalkSessionServer() {}

// UnsafeTalkSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalkSessionServer will
// result in compilation errors.
type UnsafeTalkSessionServer interface {
	mustEmbedUnimplementedTalkSessionServer()
}

func RegisterTalkSessionServer(s grpc.ServiceRegistrar, srv TalkSessionServer) {
	s.RegisterService(&TalkSession_ServiceDesc, srv)
}

func _TalkSession_SaveSpeechToText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSpeechToTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).SaveSpeechToText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/SaveSpeechToText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).SaveSpeechToText(ctx, req.(*SaveSpeechToTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_CreateTalkSessionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTalkSessionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).CreateTalkSessionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/CreateTalkSessionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).CreateTalkSessionHistory(ctx, req.(*CreateTalkSessionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_EndTalkSessionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTalkSessionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).EndTalkSessionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/EndTalkSessionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).EndTalkSessionHistory(ctx, req.(*EndTalkSessionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_GetTalkSessionHistoryByTalkSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalkSessionHistoryByTalkSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).GetTalkSessionHistoryByTalkSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/GetTalkSessionHistoryByTalkSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).GetTalkSessionHistoryByTalkSession(ctx, req.(*GetTalkSessionHistoryByTalkSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/CreateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).CreateNote(ctx, req.(*CreateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_GetListNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).GetListNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/GetListNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).GetListNote(ctx, req.(*GetListNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).UpdateNote(ctx, req.(*UpdateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_CreateTalkSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTalkSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).CreateTalkSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/CreateTalkSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).CreateTalkSession(ctx, req.(*CreateTalkSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_UpdateTalkSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTalkSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).UpdateTalkSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/UpdateTalkSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).UpdateTalkSession(ctx, req.(*UpdateTalkSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_GetTalkSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalkSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).GetTalkSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/GetTalkSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).GetTalkSession(ctx, req.(*GetTalkSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalkSession_DeleteTalkSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTalkSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkSessionServer).DeleteTalkSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talk_session.TalkSession/DeleteTalkSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkSessionServer).DeleteTalkSession(ctx, req.(*DeleteTalkSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TalkSession_ServiceDesc is the grpc.ServiceDesc for TalkSession service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TalkSession_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "talk_session.TalkSession",
	HandlerType: (*TalkSessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveSpeechToText",
			Handler:    _TalkSession_SaveSpeechToText_Handler,
		},
		{
			MethodName: "CreateTalkSessionHistory",
			Handler:    _TalkSession_CreateTalkSessionHistory_Handler,
		},
		{
			MethodName: "EndTalkSessionHistory",
			Handler:    _TalkSession_EndTalkSessionHistory_Handler,
		},
		{
			MethodName: "GetTalkSessionHistoryByTalkSession",
			Handler:    _TalkSession_GetTalkSessionHistoryByTalkSession_Handler,
		},
		{
			MethodName: "CreateNote",
			Handler:    _TalkSession_CreateNote_Handler,
		},
		{
			MethodName: "GetListNote",
			Handler:    _TalkSession_GetListNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _TalkSession_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _TalkSession_DeleteNote_Handler,
		},
		{
			MethodName: "CreateTalkSession",
			Handler:    _TalkSession_CreateTalkSession_Handler,
		},
		{
			MethodName: "UpdateTalkSession",
			Handler:    _TalkSession_UpdateTalkSession_Handler,
		},
		{
			MethodName: "GetTalkSession",
			Handler:    _TalkSession_GetTalkSession_Handler,
		},
		{
			MethodName: "DeleteTalkSession",
			Handler:    _TalkSession_DeleteTalkSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "talk_session.proto",
}
